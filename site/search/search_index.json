{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["version","平台","的","轻量","0","unikeen","python","聊天","、","机器","简介","编写","量级","bot","一个","多","-","扩展","机器人","是"," ","little","框架","1.0","轻量级",".","由","可"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["平台","的","轻量","unikeen","python","聊天","、","机器","量级","编写","bot","一个","多","-","扩展","机器人","是"," ","little","框架","轻量级","由","可"],"title":"简介","title_tokens":["简介"]},{"location":"about/","text":"","text_tokens":[],"title":"关于 本 项目","title_tokens":["项目","关于"," ","本"]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":["implied","merge","not","event","liable","otherwise","so","hereby","damages","do",")","copies","conditions","\"","warranty","particular","with","or","an","(","as","许可","person","distribute","merchantability","charge","but","from","action","permission","software","portions","of","limited","/","authors","a",",","out","2022","noninfringement","without","c","above","copyright","limitation","use","including","this","tort","liability",".","permit","mit","the","and","associated","to","contract","in","persons","fitness","furnished","granted","free","subject","dealings","whom",":","claim","notice","following","express","purpose","sell","copy","holders","kind","be","publish","files","unikeen","for","included","any","other","obtaining","sublicense","substantial","provided","connection","warranties","modify","all","whether","documentation","rights"," ","deal","no","is","restriction","shall","arising"],"title":"授权 许可","title_tokens":[" ","授权","许可"]},{"location":"test/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["点击","调整","新型","独显","条","中","或许","对以","小窗","快捷键","实际","会","隐藏式","反恐精英","变为","rtx3080","截图","保持","7.15","修复","人物","公司","辨率","范围","cv","若","对","回","麻烦","通过","yolov5n","关系","客户端","单次","窗口","被","游戏","选项","head","流程","rtx3070","问题","毫无","差异","修改","这一","30","小于","程序运行","下次","/","敌人","难点","日志","我们","真实","win32gui","only","且","库函数","，","反作弊","改为","提示","接受","系统","0.12","孙瑜杰","本","》","存在","结合","自动","检测","执行","矩形框","十分","fps","$","由","主要","进行","附录","调节","到","准度","初步","花费","的","37","阻塞","当","神经网络","辅助","按下","而是","展示","得出","14","对近","time","一次","第一人称","架构","无","方案","status","第三方","6m","小","腾讯","转换","待","显示","来自","一组","cuda","匀速","本次","api","7.13","可","及","作业","pytest","瞄准","12","改","00","实验","记录","函数","主体","keyboard","cs1.6","捕捉","（","界面","try","精准","精英","。","避免","秒","进一步","环节","提高","传统","start","集成","反应","0.2","ttkbootstrap","《","省去","launcher","全","矩形","缩小","功能","人称","标题","监听","单层","sys","状态","不同","经过","平台","分工","静态","根据","0.4","版本","分辨率","0","至","51","pydirectinput","调和","展现","calc","“","推荐","0.5","其","最佳","减少","0.1","获取","、","捉到",")","switch","课程","frame","sjtu","​","近","10","0.02","快捷","时间","集","asr","灵敏度","切换","事件","流程图","研究","考虑","前后","库","三方","各","qtwidgets","上","函数调用","apex","未来","隐藏","启动","使","设计","自行设计","数据","训练","模型","模式","速度","基本","传入","时会","参与","定义","不计","单独","需","系","信度","原始","按","click","反恐","预","屏幕","r7","循环","改动","最大","）","此类","gui","32","主力","normal","启动器","位置","彭梦龙","在","pyqt5","aiming","偏移","将","准星","演示","撰写","ttk","参数传递","关闭","7.14","调用函数","\\","端","打开","读取","：","运行","有效","56","仅","高手","忽略","中心","截屏","目标","特点","beta","反复","20","供","左右","技术","引发","格式","pt","指定","捕捉到","vega","第一","不胜","torch","框架","21","保存","体验","legends","适配","布局","按钮","leq","输入","最初","下单","网络","普通","numpy","显卡","录制","于","美化","位于","测试程序","设备","发生","敏度","新","scale","15","主程序","构建","降低","共享","hook","上述","5800h","yolov5s","cv2","设置","yolov5","”","智能","大致"," ","基于","语音","键时","openvino","作用","传递","若无则","directory","18","从","防不胜防","测试","与","0.3","加速","精确度",">","深层","前端","出","终端","ratiobutton","现代","保持一致","不","置信度","如下","物体","优化","倍率","直接","下载","神经","情况","有","思路","行为","7.12","为","console","程序","采取","耗时","类似","识别","5","...","初代","(","朱烨","画面","实时","报错","48","反应速度","连接","得到","以","08","神经网","第一次","全球","特殊","秒左右","bin","一般","藏式","过大时","现代化","load","graphics","匀速运动","攻势","实现","后续","标框","选择","不再","amd","精准度","捉","一致","go","[","由于","13","扁平化","紧张","或","改进","opencv","非","分析","时间延迟","自行","头部","内存","人工智能","os","tkinter","文件","19","均","第三","改变","命令行","ai","确定","也","扁平","组员","程序开发","数传","制作","1","小组","demo","依赖","qtgui","py",":","但","组","视频","绘制","选取","moveto","了","多次","提供","后","可观","之后","无需","用于","23","注","借鉴","except","合适","定位","意识","动态","缩短","过程","多种","pythonw","若无","4","pytorch","时","16","回归","约","可以","毫无作用","端的","yolov5m","解决","深刻","延迟","s","使用","重复","定性","目录","时延","增加","计算","pickle","需要","出现","客户","多个","生效","差","精确","迭代","cd","原创","loop","保证","分辨","汇报","人脑","用户","人工","完全","弹窗","0.09","语句","举报","平化","命令","3","实施","]","多款","调节器","忽略不计","算法","screenindo","7","线程","重构","分离","交互","核显","ui","最终","每","这么","最近","集成显卡","完成","冲突","54","bug","几乎","代码","战场","风格","0.005","进程","作为","同时","实测","导致","参数","2","最早","时有","射击","迁移","前台","-","持平","cs","内","信息","脚本","import","鼠标","较","老旧","等","并",".","最后","6","两次","个","灵敏","键盘","影响","最快","所有","x","rtx30","python","cpu","部分","次","11","加以","简洁","运用","移动","0.008","22","验证","ultralytics","_","全屏","audio","方式","json","变换","独立","确立","结束","文档","打标","应对","和","作弊","running","搭建","会议","相关","嵌套","都","下","概要","qimagetocvmat","标准","每次","说明","敌方","tune","种","负责","性能","相同","组件","hub","0.06","运动","置顶","一步","置信","仅供","需求","尽量","补偿","精度","多重","gpu","开发","原理","难以","调用","ppt","以上","ai001","离","指引","aim","模拟","如","高","有关"],"title":"优秀 插件 示例","title_tokens":["示例"," ","优秀","插件"]},{"location":"test/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":[" ","彭梦龙","：","孙瑜杰","、","组员","朱烨"],"title":"FPS - AI - Aiming","title_tokens":[" ","ai","aiming","fps","-"]},{"location":"test/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["加速","平台","新型","前端","静态","出","现代","不","中","或许","对以","物体","优化","展现","人脑","用户","实际","人工","神经","0.1","有","反恐精英","、","经过","课程","为","公司","程序","cv","举报","sjtu","​","平化","近","对","识别","通过","多款","画面","实时","灵敏度","单次","分离","考虑","前后","被","游戏","流程","ui","未来","启动","差异","神经网","设计","全球","这一","数据","训练","模式","战场","敌人","一般","现代化","同时","单独","我们","匀速运动","攻势","实现","参数","，","且","反作弊","系","从","防不胜防","时有","射击","精准度","本","反恐","》","存在","结合","检测","cs","go","鼠标","改动","或","扁平化","）","fps","分析","此类","并","$","内存","启动器","位置","人工智能","在","调节","准度","到","灵敏","的","将","演示","影响","神经网络","辅助","rtx30","\\","而是","次","读取","端","：","ai","确定","也","第一人称","扁平","特点","运用","移动","小组","反复","验证",":","但","技术","了","第一","不胜","提供","框架","方式","json","匀速","后","可观","本次","适配","作业","和","leq","作弊","瞄准","下单","网络","用于","记录","普通","合适","显卡","于","（","意识","动态","界面","缩短","过程","相同","精准","pytorch","。","运动","精英","敏度","仅供","传统","可以","反应","尽量","共享","《","深刻","设置","yolov5","s","延迟","智能","原理"," ","基于","难以","ai001","时延","缩小","功能","模拟","人称","不同","与"],"title":"概要","title_tokens":["概要"]},{"location":"test/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["分工","前端","0","51","0.1","7.15","7.12","人物","程序","10","5","3","时间","朱烨","7","单次","48","库","前后","三方","08","启动","问题","设计","54","30","训练","模型","风格","难点","日志","实现","参数","2","孙瑜杰","-","预","cs","矩形框","go","脚本","13","鼠标","fps","时间延迟","老旧","gui","32",".","启动器","6","附录","彭梦龙","tkinter","aiming","的","偏移","37","19","7.14","python","端","11","第三","ai","14","56","架构","仅","方案","1","小组","依赖","22","第三方",":","技术","提供","21","后","7.13","瞄准","12","与","00","23","概要","标准","4","16","15","0.2","延迟","开发"," ","目录","矩形","功能","传递","18","高","0.3"],"title":"目录","title_tokens":["目录"]},{"location":"test/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["分工"," ","小组"]},{"location":"test/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["启动器","最初","启动","与","前端","完成","迭代","实验","灵敏","版本","的","主体","分辨率","演示","模型","代码","中","撰写","负责","分辨","（","优化","端","参与","得出","真实","获取","思路","日志","、","参数","，","敏度","辨率","程序","本","通过","了","开发","灵敏度"," ","脚本","关系","窗口","提供","鼠标","）","游戏","等","后","测试","文档"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"test/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["启动器","启动","与","前端","实验","迭代","灵敏","的","设计","主体","录制","演示","中","模式","负责","端","参与","得出","思路","、","。","实现","，","参数","敏度","程序",":","视频","通过","开发","了","cs","灵敏度","go"," ","脚本","信息","客户端","关系","窗口","提供","鼠标","前后","传递","游戏","交互","等","后","客户","测试"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"test/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["和","问题","在","的","数据","训练","模型","cs1.6","中","（","速度","汇报","测试程序","得出","也","思路","、","实现","，","选择","制作","程序","测试","精度","适配","对","本","集","使用","了","并","yolov5n"," ","ppt","流程图","由于","文档","上","legends","）","较","游戏","流程","后","可观","不同","最终","apex","打标"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"test/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["加速","平台","前端","cd","原创","中","物体","下载","小窗","用户","有","反恐精英","、","switch","课程","人物","console","程序","若","sjtu","命令","识别","对","asr","]","灵敏度","画面","yolov5n","三方","库","交互","游戏","启动","全球","训练","模型","代码","模式","bin","攻势","参数","，","射击","前台","》","反恐","-","预","自动","检测","cs","go","[","脚本","鼠标","）","并",".","由","启动器","主要","位置","灵敏","的","文件","演示","影响","关闭","\\","端","第三","展示","命令行","：","运行","ai","无","组员","程序开发","移动","demo","第三方","py","ultralytics","_",":","待","pt","audio","提供","torch","来自","后","api","可","和","running","与","用于","捕捉","（","tune","性能","位于","过程","若无","置顶","。","一步","精英","进一步","敏度","主程序","《","设置","yolov5","使用","开发"," ","调用","语音","基于","launcher","目录","计算","模拟","若无则","directory","测试"],"title":"程序 架构","title_tokens":["程序"," ","架构"]},{"location":"test/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["启动","注","如下","程序运行","bin","关闭","直接","\\","：","运行","ai","会","需","。","，","程序","若","py","自动","使用"," ","流程图","launcher","流程","."],"title":"功能 实现 与 技术 方案","title_tokens":[" ","功能","实现","方案","技术","与"]},{"location":"test/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["点击","深层","前端","根据","条","ratiobutton","不","中","至","下载","“","推荐","会","行为","变为","rtx3080","弹窗","为","frame","语句","...","麻烦","灵敏度","yolov5n","报错","窗口","库","各","被","游戏","上","每","启动","第一次","设计","模型","bin","风格","下次","时会","同时","参数","实现","，","选择","提示","存在","自动","执行","cs","go","脚本","鼠标","）","较","并",".","调节","在","灵敏","tkinter","的","文件","ttk","所有","关闭","均","\\","端","读取","改变","运行","ai","也","一次","目标","status","demo","供","py","小","_",":","引发","了","第一","显示","提供","保存","json","一组","后","及","布局","和","可","按钮","running","用于","借鉴","嵌套","下","except","显卡","每次","说明","（","界面","设备","发生","try","组件","pytorch","。","时","敏度","避免","scale","构建","ttkbootstrap","yolov5m","设置","多重","”","使用","以上"," ","基于","省去","openvino","标题","如","状态","不同"],"title":"前端 启动器","title_tokens":["前端","启动器"," ","启动"]},{"location":"test/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["前端","根据","置信度","分辨率","中","pydirectinput","分辨","倍率","calc","优化","高","用户","获取","截图","、","捉到",")","弹窗","人物","辨率","采取","对","识别","实施","(","通过","时间","灵敏度","事件","screenindo","窗口","库","游戏","head","流程","函数调用","最近","启动","特殊","模式","bin","速度","传入","定义","实测","win32gui","load","参数","实现","，","后续","信度","原始","按","click","系统","射击","捉","自动","屏幕","cs","go","鼠标","opencv","较","并",".","头部","启动器","两次","位置","到","在","pyqt5","灵敏","的","键盘","将","准星","当","x","按下","\\","次","读取","展示","加以","截屏","目标","移动","status","demo","_",":","绘制","转换","格式","选取","moveto","了","指定","捕捉到","torch","json","后","api","running","下单","相关","函数","下","qimagetocvmat","keyboard","捕捉","敌方","定位","tune","hub","运动","。","敏度","置信","补偿","hook","上述","yolov5","使用","重复"," ","键时","调用","离","计算","模拟","监听","从","与"],"title":"后 端 脚本","title_tokens":["后"," ","脚本","端"]},{"location":"test/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["难点"," ","技术"]},{"location":"test/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":[" ","ttkbootstrap","：","解决","库","实现","。","使用","了","美化"],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":["python"," ","tkinter","的","库","设计","标准","老旧","gui",".","1","风格"]},{"location":"test/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["隐藏","前端","终端","函数","的","冲突","loop","文件","阻塞","多个","关闭","调和","调用函数","进程","端","打开","pythonw","：","完全","、","参数","。","，","start","以","解决","通过","执行","并","循环"," ","调用","import","难以","脚本","保存","方式","分离","json","前后","传递","独立","后","与"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":[" ","端","问题","前后","传递","参数","2","."]},{"location":"test/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["差","独显","迭代","0.4","版本","中","至","pydirectinput","保证","优化","calc","0.5","高","用户","最佳","情况","截图","、",")","0.09","耗时","对","识别","5","0.02","(","yolov5n","忽略不计","单次","研究","游戏","head","核显","最终","这么","rtx3070","集成显卡","启动","毫无","使","小于","模型","代码","几乎","速度","0.005","敌人","作为","不计","我们","graphics","only","库函数","，","选择","最早","系","amd","测试","射击","迁移","0.12","精准度","-","r7","紧张","鼠标","改动","）","主力","并","最后","启动器","进行","位置","到","在","准度","pyqt5","花费","的","将","最快","rtx30","cpu","端","部分","次","：","忽略","截屏","目标","移动","反复","0.008","6m","_","了","vega","多次","方式","cuda","确立","应对","和","瞄准","下单","函数","都","下","显卡","（","种","性能","多种","0.06","精准","。","秒","环节","约","可以","集成","0.2","毫无作用","解决","5800h","yolov5s","延迟","gpu"," ","时延","aim","计算","作用","模拟","需要","从","多个"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":[" ","瞄准","单次","3","时间延迟","延迟","时间","高","."]},{"location":"test/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["和","调整","位置","到","瞄准","精确","根据","函数","的","设计","下","自行设计","模型","影响","最终","性能","速度","：","运行","确定","实际","情况","仅","。","时","，","人物","需求","射击","识别","解决","通过","使用","了","大致","矩形框","实时"," ","十分","提供","矩形","考虑","计算","游戏","自行","可观","并","精确度","头部"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":[" ","提供","预","矩形","4","仅","训练","模型",".","人物","矩形框"]},{"location":"test/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["加速","和","输入","进行","在","与","灵敏","搭建","记录","偏移","中","模型","最终","关闭","基本","倍率","“","过大时","其","：","同时","确定","导致","我们","、","pytorch","。","参数","，","敏度","回归","约","移动","反复","接受","原始","20","解决",":","组","”","了","cs","灵敏度","并","定性","go"," ","关系","内","全","鼠标","变换","连接","选项","自行","单层","得到","出现","后","游戏","测试","有关"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":["go"," ","问题","鼠标","5","偏移",":",".","cs"]},{"location":"test/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":[" ","开发","日志"]},{"location":"test/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["前端","启动器"," ","启动"]},{"location":"test/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["启动器","无需","生效","个","在","启动","将","不","bug","（","下次","/","关闭","优化","端","改变","用户","快捷键","运行","时","参数","一步","，","弹窗","进一步","修复","2","可以","提示","若","快捷","通过","使用","了","待","内","切换"," ","语音","显示","体验","改动","）","游戏","后","测试"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["6"," ","7","10",":","-","08","16",".","0.3"]},{"location":"test/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["调节","在","灵敏","准度","的","保持一致","用户","精准","时","保持","敏度","，","提高","选择","精准度",":","一致","cs","调节器","灵敏度","内","go"," ","显示","鼠标","游戏","与"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":[" ","7","14","5",":","-","54",".","0.3","19"]},{"location":"test/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["优化"," ","提示","指引","用户","体验","方式","设置","，","弹窗","使用"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["15"," ","7","14","3",":","-","37",".","0.3"]},{"location":"test/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["按钮","启动器","隐藏","启动","会议","前端","完成","设计","阻塞","参数传递","（","模式","关闭","动态","python","藏式","端","pythonw","同时","运行","会","隐藏式","也","变为","参数","避免","，","。","新","数传","改为","start","beta","程序","不再","端的","类似","-","腾讯"," ","脚本","线程","增加","窗口","json","传递","）","选项","结束","后","之后","与",">"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":[" ","7","14","0.3",":","-","30",".","1"]},{"location":"test/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["normal","启动","现代","模型","（","界面","现代化","、","扁平","。","，","选择","提示","ttkbootstrap","demo","平化","使用"," ","重构","增加","扁平化","方式","或","）","游戏","及"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":[" ","51","7","13","22",":","-","0",".","0.3"]},{"location":"test/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["启动器"," ","启动","前端","完成","tkinter","使用","开发"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":[" ","11","0.2","7","13","23",":","-","0","."]},{"location":"test/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["后"," ","脚本","端"]},{"location":"test/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["动态","优化"," ","补偿","算法","个","减少","时延","流程","的","bug","，","演示","修复","模式","了","1"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":[" ","3",":","-","7.15","32",".","0.3","19"]},{"location":"test/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["输入","调整","灵敏","准度","根据","的","用户","精准","，","敏度","提高","移动","精准度",":","cs","灵敏度","go"," ","算法","鼠标","适配"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":["7.14"," ","11","23",":","-","2",".","0.3"]},{"location":"test/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["改","前端","完成","的","演示","模式","参数传递","展示","截图","。","参数","，","标框","新","数传","范围","识别","回","全屏","并","实时"," ","json","传递","与"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["7.14"," ","00","0.3",":","-","18",".","1"]},{"location":"test/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["问题","初步","的","分辨率","分辨","动态","敌人","有效","真实","对近","匀速运动","运动","实现","，","修复","辨率","补偿","识别","屏幕","了"," ","算法","非","匀速"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":["7.14"," ","00","56",":","-","0",".","0.3"]},{"location":"test/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["的","将","准星","至","模型","优化","最佳","一步","，","进一步","选择","改为","目标","降低","迁移","了"," ","离","时延","方式","最大","cuda","由","最近"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":[" ","12","0.2",":","-","0","32",".","7.13"]},{"location":"test/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["位置","瞄准","与","函数","的","修改","模型","秒左右","速度","过程","小窗","展示","截图","、","置顶","。","简洁","，","高手","中心","为","反应","移动","降低","0.2","识别","左右","延迟","持平","屏幕","使用"," ","单次","鼠标","改进","opencv","反应速度","流程","api"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":[" ","21","48","0.1","5",":","-","7.12","."]},{"location":"test/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":[" ","瞄准","0.5","单次","近","0.4","版本","初代","-","延迟","，","秒"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":[" ","11","14","0.1",":","-","7.12","0","."]},{"location":"test/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"test/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["os","pyqt5","tkinter","numpy","keyboard","pydirectinput","python","time","win32gui","pytorch",")","ttkbootstrap","qtgui","-","(","cv2"," ","torch","json","pickle","opencv","sys","qtwidgets",".","pytest"],"title":"第三方 依赖 库","title_tokens":[" ","第三","依赖","第三方","三方","库"]},{"location":"update-plan/","text":"","text_tokens":[],"title":"更新 计划","title_tokens":[" ","计划","更新"]},{"location":"api/auth-config/","text":"","text_tokens":[],"title":"鉴权 与 功能 配置","title_tokens":[" ","功能","配置","鉴权","与"]},{"location":"api/draw-card/","text":"","text_tokens":[],"title":"响应 卡片 绘制","title_tokens":["响应"," ","卡片","绘制"]},{"location":"get-start/deployment/","text":"","text_tokens":[],"title":"部署   Bot","title_tokens":["bot"," ","部署"]},{"location":"get-start/installation/","text":"","text_tokens":[],"title":"安装","title_tokens":["安装"]},{"location":"get-start/question/","text":"","text_tokens":[],"title":"遇到 问题","title_tokens":[" ","遇到","问题"]},{"location":"get-start/set-driver/","text":"","text_tokens":[],"title":"配置 驱动器","title_tokens":[" ","配置","驱动","驱动器"]},{"location":"get-start/set-sql/","text":"","text_tokens":[],"title":"配置   SQL","title_tokens":[" ","配置","sql"]},{"location":"plugin/introduction/","text":"","text_tokens":[],"title":"插件 入门","title_tokens":["入门"," ","插件"]},{"location":"plugin/plugins-group/","text":"","text_tokens":[],"title":"插件 组","title_tokens":[" ","插件","组"]},{"location":"plugin/standard-plugin/","text":"","text_tokens":[],"title":"标准 插件","title_tokens":[" ","插件","标准"]}]}