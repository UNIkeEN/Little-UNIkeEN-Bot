{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["的","轻量级","轻量","由","unikeen","version","-","框架",".","可","扩展","little","是","平台","多","1.0","一个","聊天","python"," ","机器","机器人","0","编写","量级","、","bot","简介"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["的","轻量级","轻量","由","unikeen","-","框架","可","扩展","little","是","平台","多","一个","聊天","python"," ","机器","机器人","编写","量级","、","bot"],"title":"简介","title_tokens":["简介"]},{"location":"about/","text":"","text_tokens":[],"title":"关于 本 项目","title_tokens":["项目","关于","本"," "]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":["other","persons","arising","this","kind","charge","(","action","\"","particular","holders","in","from","merge","hereby","with","/","warranties","merchantability","obtaining","sublicense","copyright",")","software","copies","above","copy","noninfringement","distribute","许可",",","modify","following","dealings","shall","2022","of","subject","claim","permission","free","and","deal","use","person","permit","contract","liability","notice","out","or","without","c","associated","warranty","otherwise","including",".","all","whom","event","not","a","fitness","purpose","so"," ","tort","restriction","is","an","authors","connection","limitation","conditions","mit","unikeen","any","damages","do","portions",":","publish","as","liable","files","be","the","substantial","for","included","but","documentation","express","sell","whether","no","limited","provided","granted","implied","furnished","to","rights"],"title":"授权 许可","title_tokens":["许可","授权"," "]},{"location":"test/","text":"test","text_tokens":["test"],"title":"响应 卡片 绘制","title_tokens":["卡片","绘制","响应"," "]},{"location":"test/#test","text":"","text_tokens":[],"title":"test","title_tokens":["test"]},{"location":"get_start/AI001/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["设备","7.12","传递","aim","变换","撰写","console","置信度","组件","分辨率","0.4","不","问题","避免","0.09","核显","记录","得出","每次","legends","(","十分","函数调用","关闭","加速","功能","框架","win32gui","也","简洁","《","耗时","扁平","多次","战场","数传","0.5","模式","说明","ai","思路","14","pt","指引","主力","键时","os","用户","对近","循环","我们","_","灵敏","不胜","tkinter","修改","近","但","为","12","-","补偿","最初","rtx3080","下单","一般","15","小窗","选择","scale","最后","自行","均","后","下载","json","可观","非","方式","对以","提示","小组","第一次","bin","实时","下次","尽量","定义","辅助","反恐精英","分辨","改","保持一致","screenindo","上","语句","美化","sjtu","需要","程序","5","51","准星","（","次","改进","程序运行","花费","23","函数","launcher","rtx3070","作为","命令","调用函数","意识","持平","隐藏式","status","回归","界面","风格","信息","”","会议","load","概要","loop","体验","传统","初步","时会","现代化","graphics","端","矩形","展现","内","yolov5m","注","7.13","离","点击","训练","定性","有效","偏移","攻势",":","yolov5n","借鉴","信度","深刻","16","cs","作用","采取","7.15","运动","多个","完成","特殊","迭代","0.005","毫无","6m","目录","18","被","ultralytics","选项","提高","如","速度","隐藏","time","由","展示","差","敏度","ppt","待","截图","fps","数据","通过","完全","0.1","头部","客户","目标","frame","省去","确定","反应速度","新","范围","难以","beta","普通","截屏","当","转换","关系","按钮","r7","报错","智能","类似","集","cd","弹窗","全屏","精确","时间延迟","阻塞","重复","相关","高手","人工智能","矩形框","如下","执行","sys","本","基于","时间","制作","可","到","opencv","第一","至","可以","directory","前端","保持","得到","由于","端的",">","“","x","若无","研究","标框","：","19","rtx30","后续","54","...","置顶","事件","或许","7.14","流程图","分析",".","库函数","影响","终端","降低","click","5800h","差异","qimagetocvmat","其","仅","人称","深层","敌方"," ","而是","朱烨","架构","0.2","13","精度","实际","防不胜防","第三方","扁平化","迁移","秒","个","torch","cpu","且","游戏","自行设计","改为","精确度","流程","特点","延迟","未来","原创","pytorch","audio","改变","布局","库","神经","运用","减少","主程序","实验","ai001","依赖","import","方案","运行","37","apex","捕捉到","高","0","对","平化","独显","集成","来自","变为","组","无","反应","。","内存","主体","]","0.008","实现","新型","无需","修复","30","作弊","keyboard","单层","pythonw","种","vega","等","若","这一","部分","一致","56","动态","ttkbootstrap","切换","调节","多款","缩短","提供","，","这么","了","检测","系统","反复","except","考虑","tune","21","ui","有","程序开发","​","版本",")","集成显卡","单独","格式","最佳","调整","启动器","asr","仅供","中","2","线程","）","网络","准度","大致","输入","出现","和","生效","模型","hub","normal","打开","瞄准","参数","6","根据","有关","获取","反恐","使","$","参与","bug","录制","读取","08","适配","全","相同","以","附录","pytest","cuda","20","qtwidgets","视频","需","真实","指定","匀速运动","48","课程","不计","传入","0.12","解决","约","位于","进行","00","若无则","7","导致","一组","构建","精准度","精英","only","同时","全球","每","numpy","leq","调和","在","辨率","最快","倍率","引发","、","设计","作业","屏幕","保存","灵敏度","忽略不计","原理","10","条","\\","出","gui","老旧","置信","head","pydirectinput","s","计算","第一人称","单次","不再","组员","快捷","移动","人物","左右","紧张","标题","打标","最大","0.3","主要","moveto","测试程序","启动","按","yolov5","情况","1","三方","实施","技术","之后","测试","running","接受","上述","命令行","cv2","两次","经过","匀速","搭建","会","小于","彭梦龙","0.06","设置","开发","神经网","客户端","py","以上","最近","识别","4","汇报","增加","与","分工","时延","几乎","从","中心","0.02","腾讯","参数传递","过程","需求","射击","监听","11","小","秒左右","一次","发生","基本","语音","绘制","都","/","pyqt5","amd","藏式","pickle","缩小","将","多种","下","直接","存在","日志","静态","》","api","最早","yolov5s","反作弊","预","鼠标","此类","回","原始","qtgui","性能","现代","并","gpu","行为","结合","32","脚本","冲突","孙瑜杰","第三","毫无作用","python","状态","前台","ttk","[","物体","或","键盘","时","最终","捉","嵌套","显示","自动","选取","显卡","重构","所有","不同","合适","调用","各","start","交互","进程","优化","结束","ratiobutton","文档","确立","验证","3","独立","进一步","连接","改动","平台","神经网络","try","较","负责","精准","使用","定位","cs1.6","捕捉","举报","文件","hook","麻烦","公司","的","应对","demo","推荐","过大时","调节器","算法","代码","于","22","分离","快捷键","本次","标准","多重","初代","敌人","calc","难点","加以","系","按下","忽略","aiming","人脑","模拟","人工","cv","一步","共享","供","用于","及","捉到","实测","环节","保证","时有","位置","openvino","前后","画面","演示","窗口","go","switch"],"title":"部署 驱动器","title_tokens":["部署","驱动器","驱动"," "]},{"location":"get_start/AI001/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["组员","彭梦龙"," ","朱烨","、","孙瑜杰","："],"title":"FPS - AI - Aiming","title_tokens":[" ","fps","aiming","ai","-"]},{"location":"get_start/AI001/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["内存","设置","神经网","实现","新型","识别","作弊","不","与","敏度","时延","记录","从","fps","数据","通过","加速","功能","框架","0.1","这一","也","过程","《","扁平","射击","战场","动态","模式","确定","调节","多款","go","缩短","提供","ai","，","难以","了","检测","普通","反复","用户","我们","灵敏","考虑","不胜","ui","智能","缩小","有","将","​","近","存在","单独","为","但","静态","启动器","》","仅供","中","下单","）","一般","网络","准度","反作弊","鼠标","人工智能","此类","后","本","基于","json","可观","和","到","方式","现代","并","对以","结合","小组","第一","瞄准","参数","可以","前端","反恐","实时","$","读取","物体","或","尽量","辅助","：","适配","反恐精英","相同","显卡","不同","rtx30","合适","匀速运动","课程","sjtu","优化","或许","程序","分析","影响","验证","（","次","改动","平台","神经网络","精准度","精英","差异","人称","全球","同时","精准","意识","leq"," ","而是","界面","在","实际","、","设计","作业","举报","防不胜防","灵敏度","扁平化","公司","传统","的","原理","\\","现代化","且","游戏","出","s","端","第一人称","展现","流程","特点","单次","延迟","未来","训练","pytorch","分离","移动","于","攻势",":","本次","敌人","深刻","神经","运用","cs","运动","系","ai001","启动","yolov5","人脑","模拟","人工","cv","共享","技术","用于","时有","位置","对","前后","画面","平化","演示","被","经过","匀速","反应","。"],"title":"概要","title_tokens":["概要"]},{"location":"get_start/AI001/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["7.12","彭梦龙","传递","开发","实现","30","4","与","分工","问题","fps","功能","0.1","56","11","提供","ai","14","21","tkinter","12","日志","-","启动器","时间延迟","2","15","预","鼠标","矩形框","后","时间","模型","32","小组","脚本","孙瑜杰","瞄准","参数","6","第三","前端","python","08","19","附录","54","48","程序","7.14","5","51",".","3","00","23","7","仅"," ","朱烨","架构","0.2","13","风格","设计","第三方","概要","10","的","gui","老旧","端","矩形","延迟","单次","7.13","训练","22","人物","偏移",":","标准","库","0.3","16","cs","难点","7.15","启动","依赖","aiming","方案","1","三方","37","技术","高","0","前后","目录","18","go"],"title":"目录","title_tokens":["目录"]},{"location":"get_start/AI001/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["分工","小组"," "]},{"location":"get_start/AI001/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["灵敏度","分辨","主体","的","版本","开发","撰写","游戏","分辨率","端","日志","与","敏度","启动器","真实","最初","得出","代码","优化","中","）","程序","等","通过","鼠标","文档","后","（","本","完成","实验","模型","启动","脚本","提供","，","负责","迭代","参数","了","获取","前端","思路","测试"," ","参与","辨率","灵敏","演示","关系","窗口","、"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"get_start/AI001/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["灵敏度","主体","的","传递","开发","游戏","实现","客户端","端","与","敏度","视频","启动器","交互","得出","中","程序","等","通过","鼠标",":","后","客户","cs","模式","实验","启动","脚本","提供","负责","，","迭代","参数","了","思路","前端","测试"," ","参与","录制","、","前后","信息","灵敏","演示","关系","窗口","go","设计","。"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"get_start/AI001/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["集","的","速度","游戏","实现","汇报","不同","上","问题","流程","适配","中","得出","ppt","）","训练","legends","选择","数据","程序","流程图","文档","也","yolov5n","打标","（","后","制作","可观","本","和","并","测试程序","模型","较","，","使用","了","思路","apex","cs1.6","测试"," ","在","由于","对","精度","、","最终"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"get_start/AI001/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["ultralytics","]","设置","开发","console","py","由","展示","识别","与","敏度","待","关闭","若","加速","过程","《","射击","模式","提供","ai","，","语音","检测","pt","用户","_","灵敏","tune","有","程序开发","cd","-","启动器","api","asr","》","中","小窗","）","预","鼠标","后","下载","可","基于","和","性能","并","模型","脚本","第三","参数","bin","directory","前端","反恐","前台","[","若无","物体","：","反恐精英","自动","调用","置顶","课程","交互","sjtu","程序",".","位于","影响","（","进一步","若无则","平台","launcher","精英","命令","全球","使用"," ","捕捉","、","文件","第三方","灵敏度","的","torch","\\","游戏","demo","端","计算","原创","组员","代码","训练","audio","移动","人物","攻势",":","库","yolov5n","主要","cs","主程序","启动","yolov5","模拟","运行","三方","一步","用于","测试","位置","running","对","目录","画面","命令行","演示","来自","go","无","switch","。"],"title":"程序 架构","title_tokens":["架构","程序"," "]},{"location":"get_start/AI001/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["会","自动","\\","py","直接","需","流程","注","程序","流程图","关闭","若","如下",".","程序运行","launcher","启动","ai","，","运行","使用","bin"," ","：","。"],"title":"功能 实现 与 技术 方案","title_tokens":["技术"," ","实现","功能","方案","与"]},{"location":"get_start/AI001/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["设备","会","如","设置","组件","实现","以上","py","敏度","避免","不","每次","关闭","也","目标","frame","省去","ttkbootstrap","小","说明","调节","提供","一次","ai","，","发生","了","except","_","灵敏","按钮","tkinter","报错","弹窗","下","存在","为","中","rtx3080","）","选择","scale","鼠标","执行","均","后","下载","json","基于","可","和","并","行为","提示","模型","第一次","脚本","第一","参数","根据","至","bin","前端","被","状态","读取","ttk","“","变为","下次","时","嵌套","显示","自动","显卡","所有","不同","上","...","各","语句","ratiobutton",".","（","一组","构建","try","较","同时","每","深层","使用","status"," ","界面","在","风格","”","引发","设计","文件","保存","灵敏度","麻烦","的","条","时会","\\","游戏","demo","端","推荐","yolov5m","点击","pytorch","改变",":","标题","布局","库","借鉴","多重","yolov5n","cs","启动","运行","供","用于","及","openvino","running","窗口","go","。"],"title":"前端 启动器","title_tokens":["启动器","前端","启动"," "]},{"location":"get_start/AI001/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["置信度","速度","实现","分辨率","最近","展示","识别","与","敏度","keyboard","从","截图","(","函数调用","通过","win32gui","射击","头部","监听","目标","模式","go","，","了","系统","绘制","键时","用户","截屏","当","转换","_","pyqt5","灵敏","tune","将","弹窗",")","下","格式","启动器","api","补偿","中","下单","重复","相关","鼠标","后","json","原始","时间","到","并","hub","opencv","参数","bin","根据","获取","前端","读取","x","键盘","定义","捉","分辨","自动","选取","screenindo","后续","调用","指定","事件","传入","优化","准星",".","次","函数","click","qimagetocvmat","较","使用","定位","敌方","status"," ","捕捉","在","辨率","倍率","、","屏幕","load","灵敏度","hook","的","torch","head","\\","pydirectinput","游戏","demo","置信","计算","流程","离","移动","人物",":","库","calc","信度","cs","moveto","加以","采取","运动","按下","启动","按","yolov5","模拟","特殊","实施","捉到","实测","捕捉到","高","位置","running","对","上述","窗口","两次","。"],"title":"后 端 脚本","title_tokens":["后","端","脚本"," "]},{"location":"get_start/AI001/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["难点","技术"," "]},{"location":"get_start/AI001/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["美化"," ","解决","：","实现","ttkbootstrap","库","。","使用","了"],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":["tkinter","python"," ","的","gui","老旧","风格","库","设计","1","标准","."]},{"location":"get_start/AI001/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["loop","以","的","传递","隐藏","端","与","。","调用","pythonw","阻塞","start","进程","解决","分离","通过","关闭","执行","完全","终端","后","json","独立","函数","方式","多个","并","冲突","打开","import","脚本","，","调用函数","参数","难以","前端"," ","调和","循环","前后","、","文件","：","保存"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["2"," ","传递","前后","端","问题","参数","."]},{"location":"get_start/AI001/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["小于","0.06","aim","0.008","速度","0.4","差","识别","时延","0.09","核显","几乎","种","从","截图","(","vega","0.02","部分","耗时","射击","多次","目标","0.5","这么","，","了","都","主力","反复","用户","截屏","我们","amd","pyqt5","_","r7","将","多种","版本","下",")","集成显卡","最佳","-","启动器","中","最早","下单","）","yolov5s","准度","选择","最后","鼠标","到","和","方式","性能","并","gpu","模型","瞄准","至","可以","毫无作用","使","研究","：","最终","显卡","cuda","rtx30","不计","优化","0.12","需要","解决","约","5","确立","库函数","进行","（","次","花费","函数","改动","精准度","only","5800h","rtx3070","作为","精准"," ","在","0.2","最快","、","迁移","秒","忽略不计","的","cpu","head","graphics","应对","游戏","pydirectinput","端","计算","延迟","单次","代码","移动","紧张","yolov5n","敌人","calc","作用","多个","系","忽略","启动","模拟","情况","迭代","环节","保证","测试","高","0.005","位置","毫无","6m","对","独显","集成","。"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["3","时间延迟","时间"," ","高","延迟","瞄准","单次","."]},{"location":"get_start/AI001/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["的","下","游戏","速度","矩形","计算","识别","调整","自行设计","精确","精确度","十分","解决","人物","通过","自行","矩形框","需求","影响","大致","射击","可观","头部","到","和","性能","函数","并","确定","模型","提供","仅","，","运行","瞄准","根据","使用","了","情况"," ","实时","位置","最终","实际","考虑","设计","时","：","。"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":[" ","矩形框","训练","人物","预","模型","矩形","提供","4","仅","."]},{"location":"get_start/AI001/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["全","灵敏度","选项","变换","游戏","20","过大时","内","与","敏度","单层","中","记录","定性","解决","pytorch","约","移动","关闭","偏移","鼠标","加速","自行",":","后","进行","原始","输入","出现","cs","和","连接","导致","并","确定","模型","其","，","同时","参数","了","有关","基本","测试"," ","反复","回归","得到","在","、","最终","接受","我们","灵敏","“","组","倍率","关系","”","go","搭建","：","。"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":[" ","cs","偏移","5","鼠标","go",":","问题","."]},{"location":"get_start/AI001/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":["日志","开发"," "]},{"location":"get_start/AI001/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["启动器","前端","启动"," "]},{"location":"get_start/AI001/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["将","体验","显示","个","弹窗","游戏","无需","端","修复","内","不","启动器","快捷","2","待","优化","）","关闭","通过","若","改变","快捷键","后","（","进一步","改动","生效","切换","提示","启动","运行","，","参数","使用","了","可以","语音","一步","测试"," ","bug","用户","在","/","下次","时"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["0.3"," ","16","10","7","08","6",":","-","."]},{"location":"get_start/AI001/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["灵敏度","提高","显示","的","保持一致","游戏","调节器","内","敏度","与","选择","准度","鼠标",":","一致","cs","精准度","调节","，","精准","保持"," ","用户","在","灵敏","go","时"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":["14","0.3"," ","7","19","54","5",":","-","."]},{"location":"get_start/AI001/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["指引","体验"," ","优化","弹窗","设置","用户","方式","提示","，","使用"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["3","14","0.3"," ","7","15",":","37","-","."]},{"location":"get_start/AI001/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["选项","会","类似","传递","隐藏","端","改为","与","避免","增加","-","不再","启动器","pythonw","start","阻塞","线程","）","程序","关闭","腾讯","结束","参数传递","也","后","（","json","设计","数传","动态","模式","完成","启动","脚本","新","，","运行","同时","参数","隐藏式","前端","beta","之后","python"," ",">","端的","按钮","藏式","变为","窗口","会议","。"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":["14","0.3"," ","7",":","30","1","-","."]},{"location":"get_start/AI001/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["扁平化","现代化","游戏","demo","重构","增加","）","选择","（","扁平","方式","ttkbootstrap","现代","提示","模型","启动","normal","，","使用","及"," ","界面","平化","或","、","。"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["0.3"," ","0","7","13","22","51",":","-","."]},{"location":"get_start/AI001/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["前端"," ","开发","完成","使用","启动","tkinter","启动器"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":[" ","23","11","0","0.2","7","13",":","-","."]},{"location":"get_start/AI001/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["后","端","脚本"," "]},{"location":"get_start/AI001/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["补偿","，"," ","的","个","bug","优化","动态","减少","模式","演示","修复","算法","1","流程","时延","了"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["3","0.3"," ","7.15","19","32",":","-","."]},{"location":"get_start/AI001/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["灵敏度","提高","的","调整","敏度","算法","准度","移动","鼠标",":","输入","cs","精准度","，","根据","精准"," ","用户","灵敏","go","适配"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":["2","0.3"," ","23","11","7.14",":","-","."]},{"location":"get_start/AI001/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["改","的","传递","展示","全屏","识别","与","截图","参数传递","回","json","数传","模式","完成","并","新","，","范围","参数","前端"," ","实时","演示","标框","。"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["00","0.3"," ","7.14",":","18","1","-","."]},{"location":"get_start/AI001/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["分辨","初步","的","实现","分辨率","修复","识别","问题","算法","真实","补偿","匀速运动","有效","敌人","非","动态","运动","，","了"," ","对近","辨率","屏幕","匀速"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":["00","0.3"," ","56","0","7.14",":","-","."]},{"location":"get_start/AI001/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["将","迁移","的","最近","cuda","由","最佳","改为","时延","优化","离","选择","准星","最大","进一步","降低","目标","方式","模型","，","至","了","一步"," "],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":[" ","7.13","0","0.2","12","32",":","-","."]},{"location":"get_start/AI001/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["修改","的","速度","展示","为","识别","与","流程","单次","延迟","api","置顶","截图","小窗","中心","移动","左右","鼠标","高手","简洁","过程","改进","降低","函数","秒左右","模型","反应速度","，","opencv","瞄准","使用","持平"," ","位置","0.2","、","屏幕","反应","。"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":["7.12","48"," ",":","5","21","0.1","-","."]},{"location":"get_start/AI001/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["秒"," ","延迟","版本","近","0.5","0.4","-","，","瞄准","单次","初代"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["14","7.12"," ","11","0",":","0.1","-","."]},{"location":"get_start/AI001/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"get_start/AI001/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["torch",")","pytest","pydirectinput","time","qtwidgets","keyboard","-","(","pytorch","win32gui",".","sys","json","qtgui","ttkbootstrap","opencv","numpy","python"," ","os","pyqt5","cv2","pickle","tkinter"],"title":"第三方 依赖 库","title_tokens":["第三方"," ","依赖","三方","第三","库"]}]}