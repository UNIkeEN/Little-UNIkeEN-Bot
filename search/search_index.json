{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["是",".","可","unikeen","一个"," ","轻量级","机器","简介","1.0","多","的","机器人","框架","python","、","little","轻量","平台","-","bot","由","version","量级","编写","扩展","聊天","0"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["是","可","unikeen","一个"," ","轻量级","机器","多","的","机器人","框架","python","、","little","轻量","平台","-","bot","由","量级","编写","扩展","聊天"],"title":"简介","title_tokens":["简介"]},{"location":"about/","text":"","text_tokens":[],"title":"关于 本 项目","title_tokens":["项目"," ","本","关于"]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":["unikeen","permission","limited","whether","is",":","notice","so","c","for","dealings","permit","deal","all","express","subject","warranties","person","publish","kind","liability",")","free","restriction","associated","obtaining","whom","connection","mit","sell","contract","charge","do","persons","provided","event","liable","arising","following","with","substantial","\"","software","no","of","the","authors","rights","modify","warranty","许可","be","not","sublicense","from","merge","above"," ","holders","copy","but","noninfringement","tort","hereby","a","damages","in","claim","and","granted","distribute","action","out","implied","including","included","2022","merchantability",".","any",",","conditions","copies","limitation","particular","other","shall","copyright","without","or","files","as","an","otherwise","(","use","fitness","/","purpose","documentation","to","this","portions","furnished"],"title":"授权 许可","title_tokens":["许可","授权"," "]},{"location":"test/","text":"test","text_tokens":["test"],"title":"优秀 插件 示例","title_tokens":["示例","优秀","插件"," "]},{"location":"test/#test","text":"","text_tokens":[],"title":"test","title_tokens":["test"]},{"location":"get_start/AI001/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["神经网络","屏幕","集","6","等","7.15","主体","normal","生效","leq","敏度","go","朱烨","keyboard","客户端","\\","或许","技术","作用","内","转换","设备","pytorch","22","直接","上","torch","audio","大致","进一步","动态","python","51","不计","得到","鼠标","json","命令","变为","数传","射击","测试","使用","功能","信息","需","老旧","简洁","脚本","一组","s","本次","构建","性能","作为","合适","《","较","近","对以","5800h","scale","至","方式","时延","也","若无则","为","分辨","os","被","获取","偏移","11","以上","在","特点","仅","隐藏","保持一致","将","改变","自动","设计","显卡","耗时","或","启动器","库","录制","点击","出现","代码","报错","相关","精英","无","21","使","模型","静态","导致","pyqt5","置顶","事件","模式","思路","calc","初步","经过","pickle","ppt","启动","风格","参数传递","第一次","弹窗","08","yolov5n","00","基本","切换","版本","0.4","进程","多重","调和","会议","aim","移动","反恐","高手","指定","问题","head","捕捉","文件","定位","神经网","moveto","console","模拟","计算","时间延迟","若无","原始","一次","运用","迁移","frame","及","非","重复","cuda","高","graphics","13","进行","战场","...","一致","运行","捕捉到","汇报","如","加以","(","定性","32","彭梦龙","传递","传统","第三","后续","循环","]","人物","如下","应对","小组","一步","测试程序","适配","各","美化","改动","初代","0.09","制作","原创","通过","函数","以","待","最快","实施","敌人","cpu","qtgui","pydirectinput","体验","语句","迭代","改为","主程序","独立","2","win32gui","cv2","减少","变换","7.14","供","下","最大","若","提高","左右","fps","现代","不胜","try","保持","阻塞","敌方","54","numpy","需要","0.12","日志","调节器","rtx3070",">","环节","推荐","捉到","opencv","数据","矩形框","库函数","标准","openvino","4","独显","端的","ai001","过大时","存在","实测","新","无需","嵌套","难点","显示","辨率","得出","尽量","框架","的","不","5","反应速度","自行设计","之后","举报","yolov5","并","解决","精度","tune","20","16","0.2","标题","asr","结束","准度","全","0.005","）","当","vega","7.13","sys","公司","_","精确度","中心","我们"," ","精准度","视频","流程图","截屏","智能","except","布局","不再","省去","几乎","有关","apex","网络","秒","前后","调整","实验","qtwidgets","交互","人称","系","最佳","基于","命令行","仅供","0","18","一般","完成","人工智能","线程","快捷","程序运行","beta","，","信度","修改","且","概要","运动","打标","start","增加","缩小","个","screenindo","窗口","gpu","api","十分","多款","防不胜防","3","ultralytics","rtx30","15","时会","传入","花费","作业","确立","同时","而是","核显","架构","从","用户","种","游戏","程序","ratiobutton","物体","分工","均","人工","影响","攻势","x","终端","差异","0.5","现代化","和","到","由于","来自","毫无作用","目录","意识","ttkbootstrap","实际","提示","6m","gui","cv","ai","倍率","cs1.6","回归","加速","19","降低","但","用于","实时","$","范围","会","pytest","多次","import","系统","hook","分辨率","保存","内存","约","多个","py","借鉴","秒左右","每","0.3","launcher","接受","出","程序开发","特殊","改","最早","部分","下单","两次","关闭","按下","37","类似","键时","switch","amd","单独","由","48","差","确定","端","客户","考虑","参数","补偿","都","人脑","分离","10","only","多种","可以","状态","验证","demo","56","定义","未来","主力","训练","瞄准","pythonw","（","反复","bin","​","忽略不计","速度","下次","“","集成显卡","组件","难以","自行","矩形","最初","腾讯","重构","提供","tkinter","最近","30","读取","延迟","开发","实现","rtx3080","需求","改进","于","loop","共享","反应","快捷键","监听","第一人称","依赖","小于","函数调用","灵敏度","对近","文档","14","所有","前端","7","藏式","位于","冲突","孙瑜杰","qimagetocvmat","调用函数","r7","目标","7.12","这一","有效","legends","可观",":","预","sjtu","展示","准星","23","打开","持平","隐藏式","情况","第一","上述","选择","位置","、","设置","yolov5s","真实","running","回","本","了","与",")","引发","新型","调用","深层","麻烦","分析","ttk","0.008","bug","注","time","可","作弊","搭建","0.02","调节","12","关系","hub","精确","修复","保证","结合","忽略","离","每次","不同","pt","时间","负责","单层","其","三方","按","平台","》","cd","行为","最后","：","界面","此类","status","有","单次","-","主要","根据","采取","研究","load","中","后","头部","键盘","方案","避免","全屏","课程","发生","过程","置信度","反作弊","选项","执行","选取","完全","aiming","画面","0.06","参与","辅助","directory","语音","”","反恐精英","附录","毫无","cs","click","扁平化","最终","演示","神经","流程","次","缩短","yolov5m","截图","1","组","平化","小","输入","匀速","相同","时有",".","绘制","按钮","下载","全球","ui","原理","优化","撰写","匀速运动","时","组员","捉","指引","说明","算法","检测","前台","精准","格式","条","普通","记录","扁平","。","连接","[","置信","展现","识别","/","对","集成","紧张","第三方","深刻","标框","小窗","这么","灵敏","0.1"],"title":"部署 驱动器","title_tokens":["驱动器","驱动","部署"," "]},{"location":"get_start/AI001/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["组员"," ","朱烨","、","：","彭梦龙","孙瑜杰"],"title":"FPS - AI - Aiming","title_tokens":["-"," ","ai","fps","aiming"]},{"location":"get_start/AI001/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["游戏","改动","程序","神经网络","物体","这一","通过","人工","影响","攻势","可观",":","leq","敏度","敌人","go","sjtu","差异","\\","现代化","和","技术","到","或许","第一","pytorch","意识","位置","动态","、","设置","实际","鼠标","json","cv","ai","fps","现代","不胜","射击","加速","本","了","与","功能","新型","但","用于","分析","实时","$","s","本次","合适","《","作弊","近","对以","数据","内存","调节","方式","时延","ai001","也","存在","为","结合","被","尽量","出","不同","框架","的","不","下单","在","特点","平台","举报","》","yolov5","：","界面","将","此类","单次","并","有","设计","显卡","或","启动器","单独","确定","中","端","后","参数","准度","考虑","）","课程","人脑","过程","分离","精英","反作弊","公司","静态","可以","验证","模式","画面","我们"," ","经过","辅助","未来","精准度","启动","训练","瞄准","（","反复","反恐精英","cs","智能","​","扁平化","演示","神经","流程","用户","次","网络","缩短","前后","移动","反恐","难以","人称","系","平化","神经网","基于","匀速","模拟","仅供","提供","相同","时有","一般","人工智能","读取","延迟","运用","全球","ui","实现","原理","，","优化","匀速运动","且","运动","缩小","检测","于","战场","共享","反应","精准","第一人称","多款","防不胜防","普通","rtx30","记录","扁平","。","展现","作业","识别","灵敏度","对","传统","同时","深刻","而是","从","小组","前端","灵敏","0.1","适配"],"title":"概要","title_tokens":["概要"]},{"location":"get_start/AI001/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["程序","分工","6","7.12","7.15",":","预","go","朱烨","23","技术","22","目录","2","python","51","7.14","鼠标","gui","ai","fps","54","与","19","功能","日志","老旧","脚本","矩形框","标准","4","12","0.3","难点","偏移","11","的","时间","5","三方","仅","37","单次","设计","-","16","0.2","启动器","48","库","端","后","参数","方案","7.13","10","21","模型","aiming"," ","56","训练","启动","瞄准","风格","附录","cs","08","00","前后","1","问题","矩形","提供","时间延迟","tkinter","0","18",".","30","延迟","开发","实现","高","概要","13","3","依赖","15","32","彭梦龙","传递","第三","人物","第三方","架构","小组","14","前端","7","0.1","孙瑜杰"],"title":"目录","title_tokens":["目录"]},{"location":"get_start/AI001/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["分工","小组"," "]},{"location":"get_start/AI001/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["游戏","完成","程序","）","开发","等","代码","通过","提供","灵敏","主体","，","模型","优化","分辨率","撰写","敏度","思路"," ","参与","关系","分辨","启动","窗口","辨率","得出","（","迭代","获取","的","负责","、","版本","演示","鼠标","真实","实验","灵敏度","测试","本","了","与","启动器","文档","前端","中","最初","日志","端","脚本","后","参数"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"get_start/AI001/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["游戏","程序","开发","等","通过","提供","客户","主体","实现","，",":","敏度","模式","思路","go"," ","参与","关系","客户端","启动","窗口","得出","视频","迭代","cs","的","负责","、","演示","鼠标","。","前后","实验","灵敏度","传递","测试","设计","了","与","交互","启动器","信息","前端","中","灵敏","录制","端","脚本","后","参数"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"get_start/AI001/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["游戏","程序","）","制作","集","较","legends","实现","数据","模型","，","可观","思路"," ","也","打标","ppt","和","由于","训练","得出","流程图","（","不同","的","选择","yolov5n","上","速度","适配","汇报","最终","、","在","流程","apex","cs1.6","并","对","精度","测试","本","问题","了","使用","文档","中","测试程序","后"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"get_start/AI001/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["游戏","程序","原创","物体","影响","攻势","待",":","敏度","预","go","sjtu","展示","\\","和","来自","目录","主程序","位置","torch","audio","进一步","、","设置","鼠标","命令","若","ai","running","射击","测试","加速","与","使用","调用","用于","脚本","可","性能","《","py","若无则","launcher","pt","的","程序开发","三方","平台","关闭","》","yolov5","cd","：","有","并","tune","自动","-","主要","switch","由","启动器","asr","库","中","端","后","参数","）","课程","过程","代码","精英","无","模型","_","置顶","模式","画面"," ","demo","directory","训练","启动","语音","（","反恐精英","cs","bin","yolov5n","演示","移动","反恐","交互","捕捉","文件","基于","console","命令行","模拟","计算","提供","若无",".","下载","开发","全球","，","组员","检测","前台","api","运行","ultralytics","。","[","识别","灵敏度","对","第三","]","人物","第三方","一步","小窗","前端","灵敏","位于","用户"],"title":"程序 架构","title_tokens":["架构","程序"," "]},{"location":"get_start/AI001/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["程序","注",".","会","程序运行","，","py"," ","\\","启动","流程图","launcher","直接","运行","bin","流程","。","关闭","若","：","ai","自动","如下","使用","需"],"title":"功能 实现 与 技术 方案","title_tokens":["方案"," ","与","功能","技术","实现"]},{"location":"get_start/AI001/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["游戏","ratiobutton","目标","均",":","敏度","go","\\","和","语句","第一","设备","pytorch","选择","上","ttkbootstrap","设置","提示","鼠标","json","供","下","变为","ai","running","try","了","使用","引发","深层","麻烦","用于","脚本","一组","ttk","会","构建","推荐","可","较","保存","openvino","调节","scale","至","py","也","借鉴","存在","为","每","嵌套","显示","被","每次","不同","的","不","以上","在","关闭","行为","status","界面","改变","并","自动","设计","显卡","根据","标题","库","中","端","后","参数","点击","避免","）","发生","报错","执行","模型","_","状态"," ","demo","启动","”","风格","（","第一次","弹窗","cs","bin","yolov5n","except","布局","下次","省去","“","组件","多重","yolov5m","文件","小","基于","提供","tkinter","一次",".","读取","按钮","下载","frame","及","实现","，","rtx3080","时","说明","窗口","...","运行","条","时会","如","。","灵敏度","同时","所有","前端","灵敏","各"],"title":"前端 启动器","title_tokens":["启动器","启动","前端"," "]},{"location":"get_start/AI001/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["游戏","qimagetocvmat","屏幕","目标","通过","函数",":","实施","敏度","x","go","keyboard","展示","准星","\\","pydirectinput","到","转换","上述","位置","torch","win32gui","、","鼠标","json","下","倍率","running","射击","敌方","了","与","使用",")","调用","捉到","opencv","较","系统","hook","分辨率","实测","分辨","hub","辨率","离","获取","的","时间","特殊","按","下单","在","两次","按下","yolov5","status","将","并","自动","键时","tune","根据","启动器","采取","库","load","中","后","头部","键盘","参数","补偿","当","置信度","相关","选取","_","pyqt5","calc","事件","模式"," ","demo","定义","启动","截屏","弹窗","cs","bin","click","速度","流程","次","截图","移动","指定","head","捕捉","定位","moveto","模拟","计算","最近","原始",".","读取","绘制","重复","实现","，","信度","优化","高","捉","运动","screenindo","窗口","监听","格式","api","捕捉到","。","加以","传入","(","函数调用","置信","识别","灵敏度","对","后续","人物","从","前端","灵敏","用户"],"title":"后 端 脚本","title_tokens":["端","脚本","后"," "]},{"location":"get_start/AI001/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["技术","难点"," "]},{"location":"get_start/AI001/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["美化","解决","ttkbootstrap"," ","了","使用","。","库","实现","："],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":["gui",".","设计"," ","python","库","老旧","风格","tkinter","标准","1","的"]},{"location":"get_start/AI001/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["调用函数","通过","分离","函数","import","以","执行","完全","，","保存","方式","多个"," ","终端","start","打开","loop","pythonw","的","独立","、","进程","。","json","隐藏","调和","关闭","前后","：","并","难以","循环","阻塞","解决","传递","与","后","文件","调用","前端","端","脚本","冲突","参数"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["传递","2","."," ","问题","前后","端","参数"]},{"location":"get_start/AI001/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["游戏","改动","0.09","r7","目标","函数","最快","敌人","cpu","0.5","和","到","pydirectinput","作用","情况","毫无作用","迭代","选择","位置","不计","、","6m","鼠标","下","yolov5s","射击","测试","了",")","需要","0.12","rtx3070","0.008","环节","性能","作为","多次","0.02","库函数","约","5800h","至","方式","多个","时延","独显","保证","忽略","的","5","最早","部分","下单","在","最后","：","将","单次","解决","并","-","显卡","耗时","0.2","amd","启动器","差","研究","中","端","准度","都","0.005","）","vega","代码","only","多种","使","模型","_","可以","pyqt5","calc","我们"," ","0.06","主力","精准度","启动","瞄准","截屏","（","反复","毫无","yolov5n","忽略不计","速度","版本","最终","0.4","集成显卡","几乎","次","秒","截图","aim","移动","head","系","最佳","模拟","计算","延迟","迁移","cuda","，","优化","高","graphics","进行","gpu","精准","rtx30","小于","。","(","花费","识别","对","集成","紧张","确立","应对","核显","从","这么","用户","种"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["单次","时间",".","3"," ","延迟","瞄准","高","时间延迟"]},{"location":"get_start/AI001/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["游戏","性能","实时","通过","影响","函数","，","模型","矩形框","可观","需求","时","精确度"," ","精确","和","到","瞄准","情况","的","运行","位置","十分","速度","大致","最终","实际","自行设计","。","下","仅","：","调整","识别","并","解决","设计","射击","自行","人物","使用","了","根据","矩形","确定","计算","提供","考虑","头部"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":["预","."," ","人物","矩形","训练","仅","矩形框","模型","提供","4"]},{"location":"get_start/AI001/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["游戏","原始","出现","搭建","选项","导致","，","约",":","模型","“","敏度","进行","go","我们"," ","过大时","关系","和","内","”","反复","接受","pytorch","偏移","cs","单层","基本","其","、","记录","变换","全","最终","鼠标","在","有关","。","得到","连接","关闭","定性","：","倍率","回归","移动","灵敏度","解决","并","测试","加速","了","与","20","组","自行","同时","输入","确定","中","灵敏","后","参数"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":[".","5","go"," ","问题","鼠标",":","偏移","cs"]},{"location":"get_start/AI001/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":["日志","开发"," "]},{"location":"get_start/AI001/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["启动器","启动","前端"," "]},{"location":"get_start/AI001/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["bug","改动","游戏","）","通过","快捷","，","优化","待","生效","时","可以"," ","修复","体验","无需","启动","内","个","语音","显示","快捷键","（","弹窗","运行","不","2","切换","进一步","下次","提示","在","关闭","若","将","改变","/","测试","了","使用","后","启动器","一步","端","用户","参数"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":[".","-"," ","16","6","0.3","10","7",":","08"]},{"location":"get_start/AI001/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["游戏","准度","，",":","调节","时","敏度","go"," ","精准度","内","显示","精准","一致","cs","的","选择","在","鼠标","提高","保持一致","灵敏度","保持","与","调节器","灵敏","用户"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":[".","5","-"," ","19","54","0.3","14","7",":"]},{"location":"get_start/AI001/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":[" ","使用","指引","设置","提示","体验","，","优化","弹窗","用户","方式"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["3",".","-"," ","15","0.3","14","7","37",":"]},{"location":"get_start/AI001/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["完成","避免","程序","）","线程","会","按钮","beta","，","选项","模式","端的"," ","也","新","start","增加","启动","隐藏式","pythonw","窗口","（","参数传递","改为","腾讯","运行","不再","动态","python","之后","。","json","隐藏","关闭","会议","变为","数传","类似","传递","阻塞","设计","-","与","同时","结束","启动器","前端","藏式",">","端","脚本","后","参数"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":[".","30","-"," ","0.3","14","7",":","1"]},{"location":"get_start/AI001/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["游戏","）","及","normal","，","模型","方式"," ","demo","增加","现代化","启动","（","选择","ttkbootstrap","扁平化","、","扁平","提示","。","界面","现代","或","使用","平化","重构"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["13",".","-"," ","51","0.3","22","7",":","0"]},{"location":"get_start/AI001/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["完成"," ","使用","启动器","开发","启动","前端","tkinter"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":["13",".","-"," ","0.2","23","7",":","0","11"]},{"location":"get_start/AI001/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["端","脚本","后"," "]},{"location":"get_start/AI001/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["bug","模式","补偿","时延","了"," ","动态","演示","减少","修复","算法","流程","个","优化","，","1","的"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["3",".","-"," ","19","0.3","7.15",":","32"]},{"location":"get_start/AI001/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["准度","，",":","敏度","go"," ","算法","精准度","精准","cs","的","适配","鼠标","提高","调整","灵敏度","移动","根据","输入","灵敏","用户"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":["2",".","-"," ","23","7.14","0.3",":","11"]},{"location":"get_start/AI001/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["范围","完成","全屏","，","模式"," ","展示","新","参数传递","的","改","演示","。","json","截图","数传","识别","并","回","传递","与","标框","前端","实时","参数"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["00",".","-"," ","7.14","0.3",":","1","18"]},{"location":"get_start/AI001/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["屏幕","非","有效","实现","，","分辨率","匀速运动","初步","敌人"," ","运动","修复","分辨","算法","辨率","的","动态","真实","识别","对近","问题","了","匀速","补偿"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":["00",".","-"," ","56","7.14","0.3",":","0"]},{"location":"get_start/AI001/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["目标","迁移","cuda","优化","，","模型","至","方式","时延"," ","准星","离","改为","的","选择","进一步","最大","将","了","最佳","由","一步","降低","最近"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":["12","32",".","-"," ","0.2","7.13",":","0"]},{"location":"get_start/AI001/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["屏幕","延迟","过程","opencv","函数","修改","，","模型","改进","置顶","中心"," ","秒左右","展示","为","持平","瞄准","反应","api","的","位置","速度","、","反应速度","鼠标","流程","。","截图","左右","识别","移动","单次","高手","与","使用","0.2","降低","小窗","简洁"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":[".","5","-"," ","7.12","48","21","0.1",":"]},{"location":"get_start/AI001/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["单次","初代","-"," ","延迟","版本","0.4","0.5","瞄准","近","秒","，"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":[".","-"," ","7.12","14","0.1",":","0","11"]},{"location":"get_start/AI001/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"get_start/AI001/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["pytest","time",".","opencv","sys","pyqt5"," ","keyboard","pickle","qtgui","pydirectinput","os","pytorch","torch","ttkbootstrap","win32gui","cv2","python","json","(","qtwidgets","-","numpy",")","tkinter"],"title":"第三方 依赖 库","title_tokens":["第三"," ","三方","依赖","第三方","库"]}]}