{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["bot","扩展","little","机器","轻量级","python","框架","量级","可","聊天","由","简介","轻量","0","unikeen"," ","是","机器人","1.0","-","多","平台","一个","、","version",".","的","编写"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["bot","扩展","little","机器","轻量级","python","框架","量级","可","聊天","由","轻量","unikeen"," ","是","机器人","-","多","平台","一个","、","的","编写"],"title":"简介","title_tokens":["简介"]},{"location":"about/","text":"","text_tokens":[],"title":"关于 本 项目","title_tokens":["关于","项目"," ","本"]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":["limitation","substantial","copies","authors","express","persons","with","out","obtaining","mit","unikeen","damages","2022","other","copyright",")","but",",","files","许可","particular","merchantability","rights","all","included","claim","portions","holders","distribute","event","modify","whether","fitness","provided","otherwise","\"","do"," ","including","documentation","merge","use","following","liable","/","c","conditions","as","without","not","hereby","connection","be","free","kind","permission","action","(","to","permit","above","noninfringement","for","warranties","limited","sell","an","a","and",".","associated","granted","copy","liability","whom","any","or","publish","person","deal","subject","restriction","arising","contract","of","furnished","tort","implied","in","sublicense","warranty","charge","software","purpose",":","dealings","notice","this","the","so","no","from","is","shall"],"title":"授权 许可","title_tokens":[" ","授权","许可"]},{"location":"test/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["捉","负责","sjtu","难点","可以","冲突","frame","种","aim","每","引发","51","脚本","风格","由","最早","准星","0","共享","实验","秒左右","移动","语句","标框","推荐","start","辨率","端的","《",")","不再","使用","一次","选项","都","0.12","原理","弹窗","后续","pydirectinput","rtx3070","现代化","借鉴","新","最终","显卡","一步","数传","至","信息","反应速度","传统","30","普通","前端","48","来自","快捷键","解决","游戏","​","分工","legends","保持","切换","被","得到","测试程序","功能","[","灵敏度","出现","全","打标","23","0.2","标准","降低","switch","汇报","特点","11","数据","保证","时间延迟","下","仅","精度","最近","性能","gui","窗口","所有","捉到","实施","原始","灵敏","模型","参数","反复","时间","预","作弊","扁平","也","-","位于","load","32","调用函数","_","演示","调用","关系","到","精确度","0.5","行为","记录","有","反恐","每次","若无则","有关","r7","最初","本次","矩形框","这一","launcher","深层","以上","13","终端","附录","花费","十分","20","此类","人物","检测","离","pytest","速度","连接","重构","模式","提供","用户","audio","导致","提示","最佳","难以","研究","静态","倍率","动态","启动器","点击","时有","torch","sys","不同","cd","定义","减少","之后","7.14","py","框架","画面","：","设置","命令","会","无","事件","aiming","人工","console","。","深刻","偏移","（","我们","构建","测试","条","绘制","文档","）","次","qtgui","问题","ttk","实测","变换","如下","调节器","会议","4","改","openvino","增加","加以","定性","出","下单","集","设备","为","单独","交互","amd","部分","yolov5s","选取","人脑","运行","ai","其","...","瞄准","第三","置信","pt","ai001","尽量","获取","藏式","了"," ","补偿","扁平化","go","得出","较","beta","bin","directory","实时","影响","自动","提高","调节","ratiobutton","目录","于","反作弊","准度","running","客户","22","时","防不胜防","毫无","在","敌人","pytorch","(","实现","主力","组","关闭","下载","保存","0.4","小","人工智能","神经网","第一","gpu","命令行","only","线程","1","读取","客户端","环节","多个","技术","结合","或许","标题","cuda","库","迁移","cs","搭建","最快","过大时","单层","time","耗时","均","仅供","，","转换","运动","status","0.09","物体","神经网络","持平","改动","os","通过","一组","改为","click","发生","不胜","用于","报错","集成","执行","置信度","cv2","54","加速","如","和","10","$","有效","公司","精准度","cs1.6","except","7.12","0.02","适配","相关","目标","leq","调和","采取","文件","python","信度","隐藏","体验","进行","作业","三方","作用","calc","14","16","方案","集成显卡","7.15","本","scale","可观","孙瑜杰","未来","截图","经过","后","截屏","2","上述","情况","主体","多重","重复","反应","不计","计算","pyqt5","老旧","asr","分辨率","08","定位","以","函数调用","矩形","忽略不计","差","约","6","cpu","api","组员","架构","当","完全","“","对以","全球","存在","网络","0.06","举报","这么","但","流程","界面","嵌套","模拟","第三方","自行设计","最后","》","键时","日志","端","且","撰写","格式","yolov5m","而是","12","核显","课程","置顶","待","中","若无","特殊","numpy","显示","分析","朱烨","隐藏式","验证","麻烦","程序运行","graphics","彭梦龙","56","中心","优化","0.005","及","moveto","多种","视频","rtx3080","组件","import","紧张","算法","合适","接受","上","左右","屏幕","鼠标","缩小","展示","keyboard","敏度","流程图","概要","攻势","需","捕捉到","ttkbootstrap","normal","分辨","反恐精英","cv","7.13","非","主要","demo","生效",":","yolov5n","展现","时会","00","修改","运用","意识","改变","精确","3","省去","或","hook","bug","启动","精准","应对","个","单次","人称","按钮","开发","7","不","将","智能","\\","第一次","进一步","参与","hub","需要","差异","前台","vega","选择","系统","方式","独立","]","初步","大致","21","json","调整","前后","基本","腾讯","状态","辅助","qtwidgets","ppt","打开","15","小于","平台","供","小组","5","语音","确定","指定","、","根据","传入","19","思路","系","匀速","神经","高","screenindo","作为","独显","0.008","同时","时延","射击","精英","程序","循环","apex","ultralytics","分离","相同","按下","try","并","win32gui","按","直接","完成","主程序","结束","/","yolov5","小窗","变为","opencv","延迟","一致","由于","等","下次","输入","美化","最大","实际","快捷","0.1","tkinter","几乎","程序开发","版本","监听","需求","库函数","loop","简洁","迭代","基于","传递","fps","录制","多次","设计","与","位置","第一人称","37","代码","5800h","回","使","原创","类似","pickle","内存","缩短","战场","rtx30","”","6m","函数",".","两次","对近","对","保持一致","指引","各","键盘","qimagetocvmat","范围","18","参数传递","全屏","多款","说明","一般","布局","避免","pythonw","无需","注","捕捉","高手","匀速运动","回归","近","可","s","x","内","毫无作用","秒","识别","0.3","制作","现代",">","自行","修复","改进","真实","tune","依赖","阻塞","从","平化","head","初代","敌方","确立","忽略","考虑","进程","的","过程","头部","ui","若","训练","新型"],"title":"优秀 插件 示例","title_tokens":["优秀","示例","插件"," "]},{"location":"test/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["朱烨","孙瑜杰"," ","组员","：","彭梦龙","、"],"title":"FPS - AI - Aiming","title_tokens":[" ","-","ai","aiming","fps"]},{"location":"test/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["不","sjtu","智能","适配","不同","将","leq","可以","\\","框架","画面","：","设置","人工","差异","。","作业","训练","深刻","（","我们","方式","json","共享","前后","移动","本","）","可观","辅助","次","未来","平台","《","小组","经过","确定","后","、","原理","系","匀速","反应","现代化","出","下单","神经","为","单独","显卡","同时","时延","人脑","射击","ai","传统","精英","普通","前端","瞄准","程序","游戏","ai001","​","分离","相同","尽量","被","并"," ","了","对以","扁平化","go","全球","存在","网络","举报","但","流程","功能","界面","实时","灵敏度","模拟","影响","yolov5","》","调节","端","特点","且","延迟","反作弊","数据","准度","于","而是","课程","实际","中","0.1","防不胜防","在","分析","敌人","pytorch","验证","实现","灵敏","人工智能","基于","优化","fps","第一","参数","反复","神经网","设计","作弊","扁平","与","位置","第一人称","也","读取","技术","结合","或许","合适","内存","cs","缩短","rtx30","战场","演示","对","鼠标","缩小","敏度","到","仅供","，","运动","记录","攻势","有","物体","多款","反恐","神经网络","一般","匀速运动","本次","改动","近","s","反恐精英","通过","这一","cv","识别","不胜","用于","现代","此类","检测",":","加速","展现","模式","从","和","提供","运用","平化","意识","用户","难以","$","静态","的","考虑","公司","或","过程","启动","启动器","动态","ui","精准","精准度","单次","人称","时有","新型"],"title":"概要","title_tokens":["概要"]},{"location":"test/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["7.12","难点","7.14","python","aiming","51","脚本","风格","三方","偏移","14","16","0","21","方案","前后","7.15","孙瑜杰","15","问题","小组","5","后","2","4","19","高","老旧","ai","08","30","前端","矩形","瞄准","48","程序","第三","6","架构","分工"," ","go","功能","第三方","23","0.2","标准","日志","端","目录","11","延迟","12","时间延迟","仅","22","0.1","tkinter","gui","朱烨","实现","模型","彭梦龙","传递","56","fps","参数","时间","设计","预","与","1","37","-","技术","库","32","cs",".","鼠标","开发","18","概要","矩形框","13","0.3","附录","7.13","人物",":","依赖","54","00","提供","3","10","的","启动","启动器","单次","训练","7"],"title":"目录","title_tokens":["目录"]},{"location":"test/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["分工"," ","小组"]},{"location":"test/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["，","负责","中","分辨率","参与","前端","窗口","最初","程序","分辨","脚本","版本","通过","（","游戏","灵敏","模型","测试","迭代","获取","实验","了"," ","优化","本","参数","文档","）","真实","得出","与","辨率","代码","提供","灵敏度","后","完成","、","主体","思路","演示","的","鼠标","日志","端","启动","启动器","等","敏度","撰写","关系","开发"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"test/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["，","负责","客户","信息","中","参与","前端","窗口","程序","脚本","。","实现","通过","游戏","灵敏","测试","迭代","实验","前后","了"," ","传递","录制","参数",":","go","设计","与","得出","视频","客户端","模式","提供","灵敏度","后","、","主体","cs","思路","演示","的","鼠标","端","启动","交互","启动器","等","敏度","关系","开发"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"test/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["，","流程图","适配","不同","精度","中","在","程序","实现","选择","（","apex","游戏","legends","制作","模型","测试","并"," ","了","本","）","可观","文档","速度","得出","较","ppt","也","yolov5n","测试程序","问题","流程","使用","和","后","打标","、","上","思路","的","集","对","cs1.6","汇报","最终","数据","训练","由于"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"test/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["sjtu","cd","\\","py","文件","进一步","画面","：","设置","命令","无","console","前台","。","由","三方","脚本","（","]","测试","移动","）","《","平台","使用","语音","后","、","计算","交互","一步","射击","运行","asr","ai","精英","前端","程序","第三","来自","pt","api","ultralytics","组员","游戏","并"," ","全球","go","bin","directory","[","灵敏度","模拟","主程序","第三方","影响","yolov5","》","小窗","自动","端","switch","目录","课程","置顶","待","running","中","若无","性能","程序开发","灵敏","关闭","下载","模型","基于","参数","命令行","预","与","位置","代码","-","位于","原创","库","cs","_","演示",".","鼠标","对","调用","展示","敏度","，","攻势","torch","有","物体","反恐","若无则","捕捉","可","反恐精英","launcher","识别","用于","人物","主要","检测","demo",":","tune","yolov5n","加速","模式","和","提供","用户","audio","的","过程","启动","启动器","若","训练","开发"],"title":"程序 架构","title_tokens":["程序"," ","架构"]},{"location":"test/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["，","流程图","需","运行","\\","py","ai","：","会","注","程序","。","launcher","关闭","程序运行"," ","bin","直接","流程","使用","如下",".","自动","启动","若"],"title":"功能 实现 与 技术 方案","title_tokens":["与","实现","功能","技术","方案"," "]},{"location":"test/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["不","不同","目标","\\","frame","第一次","py","文件","会","设置","每","引发","脚本","。","风格","选择","（","构建","json","条","scale","语句","）","推荐","状态","ttk","供","使用","一次","后","根据","openvino","弹窗","多重","设备","借鉴","为","显卡","同时","至","运行","ai","...","前端","游戏","try","“","被","了"," ","并","较","go","存在","bin","界面","嵌套","灵敏度","变为","自动","调节","端","ratiobutton","yolov5m","下次","下","running","中","tkinter","时","显示","在","所有","窗口","pytorch","实现","麻烦","灵敏","关闭","下载","保存","模型","小","基于","第一","参数","及","设计","也","读取","rtx3080","组件","标题","库","上","cs","”","_",".","鼠标","各","敏度","均","，","行为","status","说明","每次","ttkbootstrap","布局","避免","可","以上","一组","深层","发生","用于","报错","执行","demo",":","yolov5n","如","时会","和","提供","改变","省去","提示","的","启动","except","点击","按钮"],"title":"前端 启动器","title_tokens":["启动","前端"," ","启动器"]},{"location":"test/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["捉","将","相关","目标","定义","\\","采取","信度","事件","hub","。","准星","calc","系统","json","绘制","移动","次","辨率",")","实测","使用","截图","指定","后","截屏","上述","、","弹窗","根据","传入","加以","后续","重复","pydirectinput","下单","screenindo","高","计算","选取","pyqt5","射击","分辨率","定位","函数调用","前端","置信","api","游戏","当","按下","获取","并"," ","了","补偿","win32gui","较","按","go","bin","流程","灵敏度","模拟","yolov5","键时","自动","opencv","格式","下","running","中","最近","特殊","窗口","在","捉到","实施","(","实现","原始","监听","灵敏","优化","参数","时间","moveto","与","位置","读取","load","库","cs","_","函数","屏幕",".","两次","对","鼠标","展示","keyboard","调用","键盘","敏度","qimagetocvmat","到","，","转换","运动","status","捕捉到","捕捉","分辨","通过","识别","click","人物","离","demo","置信度","速度",":","tune","模式","从","用户","head","敌方","的","hook","倍率","启动","启动器","头部","x","torch"],"title":"后 端 脚本","title_tokens":["端","后","脚本"," "]},{"location":"test/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["技术"," ","难点"]},{"location":"test/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["美化","。","实现","解决","使用","ttkbootstrap","：","库","了"," "],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":["库","设计","老旧","风格","1",".","的","标准","tkinter","python","gui"," "]},{"location":"test/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["，","调和","冲突","文件","：","pythonw","以","前端","隐藏","循环","脚本","。","通过","解决","分离","终端","关闭","独立","方式","保存","loop","完全","json","前后","传递"," ","并","执行","参数","打开","与","start","import","多个","阻塞","后","、","调用函数","函数","难以","进程","的","调用","端"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["参数","传递",".","问题","端","前后","2"," "]},{"location":"test/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["0.02","将","目标","可以","种","aim","：","需要","vega","进行","。","最早","选择","（","作用","calc","我们","方式","测试","集成显卡","移动","）","次","小于",")","截图","都","5","0.12","截屏","情况","、","系","rtx3070","pydirectinput","不计","下单","高","作为","独显","计算","amd","部分","yolov5s","最终","显卡","0.008","pyqt5","时延","至","射击","瞄准","忽略不计","差","约","cpu","解决","游戏","了"," ","并","0.06","这么","模拟","最后","0.2","端","延迟","准度","核显","保证","下","中","性能","几乎","毫无","在","敌人","(","版本","主力","库函数","0.4","模型","graphics","迭代","优化","gpu","0.005","反复","多次","only","多种","位置","代码","-","紧张","环节","多个","5800h","使","cuda","迁移","6m","rtx30","最快","_","函数","对","鼠标","耗时","到","0.5","，","0.09","r7","改动","毫无作用","秒","识别","花费","集成","速度","yolov5n","从","和","用户","head","确立","忽略","最佳","研究","的","精准度","启动","精准","启动器","应对","单次"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["3","时间","时间延迟",".","高","延迟","单次","瞄准"," "]},{"location":"test/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["精确度","，","下","仅","实际","射击","运行","时","性能","：","矩形","瞄准","。","矩形框","通过","需求","游戏","识别","解决","十分","模型","大致","调整","了"," ","人物","并","可观","自行","速度","设计","位置","使用","和","提供","实时","确定","精确","自行设计","情况","根据","影响","函数","考虑","的","计算","头部","最终","到"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":["预",".","仅","矩形框","矩形","模型","提供","训练","4"," ","人物"]},{"location":"test/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["，","输入","同时","记录","中","：","其","有关","在","约","pytorch","回归","进行","。","内","原始","偏移","解决","灵敏","组","游戏","我们","关闭","模型","20","测试","基本","“","得到","了","移动"," ","并","参数","自行","反复",":","go","与","连接","加速","变换","选项","和","灵敏度","出现","后","确定","全","、","接受","cs","导致","”","搭建","定性","鼠标","过大时","单层","倍率","敏度","最终","关系"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":["cs",":","go",".","偏移","鼠标","问题","5"," "]},{"location":"test/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":[" ","日志","开发"]},{"location":"test/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["启动","前端"," ","启动器"]},{"location":"test/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["下次","，","不","待","将","快捷","运行","可以","时","进一步","无需","显示","在","体验","改动","内","通过","快捷键","（","游戏","关闭","测试","切换","了"," ","优化","参数","）","生效","修复","使用","语音","改变","用户","后","2","/","弹窗","提示","bug","启动","启动器","端","若","个","一步"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["10",":",".","6","-","0.3","16","08"," ","7"]},{"location":"test/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["，","时","显示","在","内","选择","灵敏","游戏","保持"," ",":","go","与","调节器","灵敏度","用户","cs","鼠标","的","保持一致","提高","调节","精准度","精准","敏度","一致","准度"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":["19",":",".","-","0.3","54","14","5"," ","7"]},{"location":"test/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["，","提示","指引","方式","使用","设置","用户","体验"," ","优化","弹窗"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["3",":","15",".","37","-","0.3","14"," ","7"]},{"location":"test/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["，","同时","数传","参数传递","运行","之后","python","会","pythonw","避免","隐藏","前端","窗口","隐藏式","程序","脚本","。","（","改为","关闭","json","藏式","传递"," ","腾讯",">","参数","）","设计","与","线程","start","beta","也","端的","-","不再","阻塞","模式","选项","后","完成","结束","类似","会议","增加","变为","端","启动","动态","新","启动器","按钮"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":[":","1",".","-","0.3","14","30"," ","7"]},{"location":"test/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["，","ttkbootstrap","normal","。","选择","（","游戏","方式","模型","现代"," ","demo","）","及","扁平化","扁平","重构","使用","界面","平化","、","增加","提示","现代化","或","启动"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["51",":",".","-","13","0.3","22","0"," ","7"]},{"location":"test/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["前端","启动","启动器","tkinter","使用","完成"," ","开发"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":[":","23","0.2",".","-","13","0","11"," ","7"]},{"location":"test/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["端","后","脚本"," "]},{"location":"test/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["，","修复","时延","演示","1","减少","的","补偿","bug","动态","流程","算法","模式","个","了"," ","优化"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["3","19",":",".","-","0.3","7.15","32"," "]},{"location":"test/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["，","输入","适配","灵敏","调整","移动"," ",":","go","算法","灵敏度","用户","根据","cs","的","鼠标","提高","精准度","精准","敏度","准度"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":[":","23",".","-","0.3","7.14","11","2"," "]},{"location":"test/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["，","数传","全屏","参数传递","前端","。","识别","json","并"," ","传递","标框","参数","与","截图","模式","回","实时","完成","改","演示","的","展示","新","范围"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["18",":","1",".","-","0.3","7.14","00"," "]},{"location":"test/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["，","运动","分辨率","匀速运动","敌人","分辨","实现","识别","非","初步","了"," ","补偿","修复","真实","辨率","问题","算法","屏幕","匀速","有效","对近","的","动态"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":[":",".","-","0.3","7.14","0","00","56"," "]},{"location":"test/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["，","将","最大","时延","至","目标","最近","进一步","由","选择","改为","准星","方式","模型","了"," ","优化","离","cuda","迁移","最佳","的","降低","一步"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":[":","0.2",".","-","7.13","0","32"," ","12"]},{"location":"test/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["，","置顶","反应速度","高手","瞄准","持平","。","api","识别","模型","简洁","秒左右","中心","移动"," ","改进","速度","与","位置","流程","截图","使用","修改","、","左右","函数","0.2","反应","屏幕","小窗","鼠标","的","降低","展示","过程","为","opencv","延迟","单次"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":["7.12",":",".","-","0.1","5","21"," ","48"]},{"location":"test/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["，","0.5","初代","版本","近","秒","-","0.4","延迟","单次","瞄准"," "],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["7.12",":",".","-","0.1","0","11","14"," "]},{"location":"test/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"test/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["sys","pyqt5","tkinter","python","ttkbootstrap","numpy","pytorch","(","os","json"," ","pytest","qtwidgets","win32gui","cv2","qtgui","-",")","pickle","pydirectinput",".","time","keyboard","opencv","torch"],"title":"第三方 依赖 库","title_tokens":["第三","依赖","三方","库","第三方"," "]},{"location":"update-plan/","text":"","text_tokens":[],"title":"更新 计划","title_tokens":["计划","更新"," "]},{"location":"api/auth-config/","text":"","text_tokens":[],"title":"鉴权 与 功能 配置","title_tokens":["与","鉴权","配置","功能"," "]},{"location":"api/draw-card/","text":"","text_tokens":[],"title":"响应 卡片 绘制","title_tokens":["响应","绘制"," ","卡片"]},{"location":"get-start/deployment/","text":"","text_tokens":[],"title":"部署   Bot","title_tokens":["bot","部署"," "]},{"location":"get-start/installation/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["捉","负责","sjtu","难点","可以","冲突","frame","种","aim","每","引发","51","脚本","风格","由","最早","准星","0","共享","实验","秒左右","移动","语句","标框","推荐","start","辨率","端的","《",")","不再","使用","一次","选项","都","0.12","原理","弹窗","后续","pydirectinput","rtx3070","现代化","借鉴","新","最终","显卡","一步","数传","至","信息","反应速度","传统","30","普通","前端","48","来自","快捷键","解决","游戏","​","分工","legends","保持","切换","被","得到","测试程序","功能","[","灵敏度","出现","全","打标","23","0.2","标准","降低","switch","汇报","特点","11","数据","保证","时间延迟","下","仅","精度","最近","性能","gui","窗口","所有","捉到","实施","原始","灵敏","模型","参数","反复","时间","预","作弊","扁平","也","-","位于","load","32","调用函数","_","演示","调用","关系","到","精确度","0.5","行为","记录","有","反恐","每次","若无则","有关","r7","最初","本次","矩形框","这一","launcher","深层","以上","13","终端","附录","花费","十分","20","此类","人物","检测","离","pytest","速度","连接","重构","模式","提供","用户","audio","导致","提示","最佳","难以","研究","静态","倍率","动态","启动器","点击","时有","torch","sys","不同","cd","定义","减少","之后","7.14","py","框架","画面","：","设置","命令","会","无","事件","aiming","人工","console","。","深刻","偏移","（","我们","构建","测试","条","绘制","文档","）","次","qtgui","问题","ttk","实测","变换","如下","调节器","会议","4","改","openvino","增加","加以","定性","出","下单","集","设备","为","单独","交互","amd","部分","yolov5s","选取","人脑","运行","ai","其","...","瞄准","第三","置信","pt","ai001","尽量","获取","藏式","了"," ","补偿","扁平化","go","得出","较","beta","bin","directory","实时","影响","自动","提高","调节","ratiobutton","目录","于","反作弊","准度","running","客户","22","时","防不胜防","毫无","在","敌人","pytorch","(","实现","主力","组","关闭","下载","保存","0.4","小","人工智能","神经网","第一","gpu","命令行","only","线程","1","读取","客户端","环节","多个","技术","结合","或许","标题","cuda","库","迁移","cs","搭建","最快","过大时","单层","time","耗时","均","仅供","，","转换","运动","status","0.09","物体","神经网络","持平","改动","os","通过","一组","改为","click","发生","不胜","用于","报错","集成","执行","置信度","cv2","54","加速","如","和","10","$","有效","公司","精准度","cs1.6","except","7.12","0.02","适配","相关","目标","leq","调和","采取","文件","python","信度","隐藏","体验","进行","作业","三方","作用","calc","14","16","方案","集成显卡","7.15","本","scale","可观","孙瑜杰","未来","截图","经过","后","截屏","2","上述","情况","主体","多重","重复","反应","不计","计算","pyqt5","老旧","asr","分辨率","08","定位","以","函数调用","矩形","忽略不计","差","约","6","cpu","api","组员","架构","当","完全","“","对以","全球","存在","网络","0.06","举报","这么","但","流程","界面","嵌套","模拟","第三方","自行设计","最后","》","键时","日志","端","且","撰写","格式","yolov5m","而是","12","核显","课程","置顶","待","中","若无","特殊","numpy","显示","分析","朱烨","隐藏式","验证","麻烦","程序运行","graphics","彭梦龙","56","中心","优化","0.005","及","moveto","多种","视频","rtx3080","组件","import","紧张","算法","合适","接受","上","左右","屏幕","鼠标","缩小","展示","keyboard","敏度","流程图","概要","攻势","需","捕捉到","ttkbootstrap","normal","分辨","反恐精英","cv","7.13","非","主要","demo","生效",":","yolov5n","展现","时会","00","修改","运用","意识","改变","精确","3","省去","或","hook","bug","启动","精准","应对","个","单次","人称","按钮","开发","7","不","将","智能","\\","第一次","进一步","参与","hub","需要","差异","前台","vega","选择","系统","方式","独立","]","初步","大致","21","json","调整","前后","基本","腾讯","状态","辅助","qtwidgets","ppt","打开","15","小于","平台","供","小组","5","语音","确定","指定","、","根据","传入","19","思路","系","匀速","神经","高","screenindo","作为","独显","0.008","同时","时延","射击","精英","程序","循环","apex","ultralytics","分离","相同","按下","try","并","win32gui","按","直接","完成","主程序","结束","/","yolov5","小窗","变为","opencv","延迟","一致","由于","等","下次","输入","美化","最大","实际","快捷","0.1","tkinter","几乎","程序开发","版本","监听","需求","库函数","loop","简洁","迭代","基于","传递","fps","录制","多次","设计","与","位置","第一人称","37","代码","5800h","回","使","原创","类似","pickle","内存","缩短","战场","rtx30","”","6m","函数",".","两次","对近","对","保持一致","指引","各","键盘","qimagetocvmat","范围","18","参数传递","全屏","多款","说明","一般","布局","避免","pythonw","无需","注","捕捉","高手","匀速运动","回归","近","可","s","x","内","毫无作用","秒","识别","0.3","制作","现代",">","自行","修复","改进","真实","tune","依赖","阻塞","从","平化","head","初代","敌方","确立","忽略","考虑","进程","的","过程","头部","ui","若","训练","新型"],"title":"安装","title_tokens":["安装"]},{"location":"get-start/installation/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["朱烨","孙瑜杰"," ","组员","：","彭梦龙","、"],"title":"FPS - AI - Aiming","title_tokens":[" ","-","ai","aiming","fps"]},{"location":"get-start/installation/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["不","sjtu","智能","适配","不同","将","leq","可以","\\","框架","画面","：","设置","人工","差异","。","作业","训练","深刻","（","我们","方式","json","共享","前后","移动","本","）","可观","辅助","次","未来","平台","《","小组","经过","确定","后","、","原理","系","匀速","反应","现代化","出","下单","神经","为","单独","显卡","同时","时延","人脑","射击","ai","传统","精英","普通","前端","瞄准","程序","游戏","ai001","​","分离","相同","尽量","被","并"," ","了","对以","扁平化","go","全球","存在","网络","举报","但","流程","功能","界面","实时","灵敏度","模拟","影响","yolov5","》","调节","端","特点","且","延迟","反作弊","数据","准度","于","而是","课程","实际","中","0.1","防不胜防","在","分析","敌人","pytorch","验证","实现","灵敏","人工智能","基于","优化","fps","第一","参数","反复","神经网","设计","作弊","扁平","与","位置","第一人称","也","读取","技术","结合","或许","合适","内存","cs","缩短","rtx30","战场","演示","对","鼠标","缩小","敏度","到","仅供","，","运动","记录","攻势","有","物体","多款","反恐","神经网络","一般","匀速运动","本次","改动","近","s","反恐精英","通过","这一","cv","识别","不胜","用于","现代","此类","检测",":","加速","展现","模式","从","和","提供","运用","平化","意识","用户","难以","$","静态","的","考虑","公司","或","过程","启动","启动器","动态","ui","精准","精准度","单次","人称","时有","新型"],"title":"概要","title_tokens":["概要"]},{"location":"get-start/installation/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["7.12","难点","7.14","python","aiming","51","脚本","风格","三方","偏移","14","16","0","21","方案","前后","7.15","孙瑜杰","15","问题","小组","5","后","2","4","19","高","老旧","ai","08","30","前端","矩形","瞄准","48","程序","第三","6","架构","分工"," ","go","功能","第三方","23","0.2","标准","日志","端","目录","11","延迟","12","时间延迟","仅","22","0.1","tkinter","gui","朱烨","实现","模型","彭梦龙","传递","56","fps","参数","时间","设计","预","与","1","37","-","技术","库","32","cs",".","鼠标","开发","18","概要","矩形框","13","0.3","附录","7.13","人物",":","依赖","54","00","提供","3","10","的","启动","启动器","单次","训练","7"],"title":"目录","title_tokens":["目录"]},{"location":"get-start/installation/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["分工"," ","小组"]},{"location":"get-start/installation/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["，","负责","中","分辨率","参与","前端","窗口","最初","程序","分辨","脚本","版本","通过","（","游戏","灵敏","模型","测试","迭代","获取","实验","了"," ","优化","本","参数","文档","）","真实","得出","与","辨率","代码","提供","灵敏度","后","完成","、","主体","思路","演示","的","鼠标","日志","端","启动","启动器","等","敏度","撰写","关系","开发"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"get-start/installation/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["，","负责","客户","信息","中","参与","前端","窗口","程序","脚本","。","实现","通过","游戏","灵敏","测试","迭代","实验","前后","了"," ","传递","录制","参数",":","go","设计","与","得出","视频","客户端","模式","提供","灵敏度","后","、","主体","cs","思路","演示","的","鼠标","端","启动","交互","启动器","等","敏度","关系","开发"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"get-start/installation/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["，","流程图","适配","不同","精度","中","在","程序","实现","选择","（","apex","游戏","legends","制作","模型","测试","并"," ","了","本","）","可观","文档","速度","得出","较","ppt","也","yolov5n","测试程序","问题","流程","使用","和","后","打标","、","上","思路","的","集","对","cs1.6","汇报","最终","数据","训练","由于"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"get-start/installation/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["sjtu","cd","\\","py","文件","进一步","画面","：","设置","命令","无","console","前台","。","由","三方","脚本","（","]","测试","移动","）","《","平台","使用","语音","后","、","计算","交互","一步","射击","运行","asr","ai","精英","前端","程序","第三","来自","pt","api","ultralytics","组员","游戏","并"," ","全球","go","bin","directory","[","灵敏度","模拟","主程序","第三方","影响","yolov5","》","小窗","自动","端","switch","目录","课程","置顶","待","running","中","若无","性能","程序开发","灵敏","关闭","下载","模型","基于","参数","命令行","预","与","位置","代码","-","位于","原创","库","cs","_","演示",".","鼠标","对","调用","展示","敏度","，","攻势","torch","有","物体","反恐","若无则","捕捉","可","反恐精英","launcher","识别","用于","人物","主要","检测","demo",":","tune","yolov5n","加速","模式","和","提供","用户","audio","的","过程","启动","启动器","若","训练","开发"],"title":"程序 架构","title_tokens":["程序"," ","架构"]},{"location":"get-start/installation/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["，","流程图","需","运行","\\","py","ai","：","会","注","程序","。","launcher","关闭","程序运行"," ","bin","直接","流程","使用","如下",".","自动","启动","若"],"title":"功能 实现 与 技术 方案","title_tokens":["与","实现","功能","技术","方案"," "]},{"location":"get-start/installation/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["不","不同","目标","\\","frame","第一次","py","文件","会","设置","每","引发","脚本","。","风格","选择","（","构建","json","条","scale","语句","）","推荐","状态","ttk","供","使用","一次","后","根据","openvino","弹窗","多重","设备","借鉴","为","显卡","同时","至","运行","ai","...","前端","游戏","try","“","被","了"," ","并","较","go","存在","bin","界面","嵌套","灵敏度","变为","自动","调节","端","ratiobutton","yolov5m","下次","下","running","中","tkinter","时","显示","在","所有","窗口","pytorch","实现","麻烦","灵敏","关闭","下载","保存","模型","小","基于","第一","参数","及","设计","也","读取","rtx3080","组件","标题","库","上","cs","”","_",".","鼠标","各","敏度","均","，","行为","status","说明","每次","ttkbootstrap","布局","避免","可","以上","一组","深层","发生","用于","报错","执行","demo",":","yolov5n","如","时会","和","提供","改变","省去","提示","的","启动","except","点击","按钮"],"title":"前端 启动器","title_tokens":["启动","前端"," ","启动器"]},{"location":"get-start/installation/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["捉","将","相关","目标","定义","\\","采取","信度","事件","hub","。","准星","calc","系统","json","绘制","移动","次","辨率",")","实测","使用","截图","指定","后","截屏","上述","、","弹窗","根据","传入","加以","后续","重复","pydirectinput","下单","screenindo","高","计算","选取","pyqt5","射击","分辨率","定位","函数调用","前端","置信","api","游戏","当","按下","获取","并"," ","了","补偿","win32gui","较","按","go","bin","流程","灵敏度","模拟","yolov5","键时","自动","opencv","格式","下","running","中","最近","特殊","窗口","在","捉到","实施","(","实现","原始","监听","灵敏","优化","参数","时间","moveto","与","位置","读取","load","库","cs","_","函数","屏幕",".","两次","对","鼠标","展示","keyboard","调用","键盘","敏度","qimagetocvmat","到","，","转换","运动","status","捕捉到","捕捉","分辨","通过","识别","click","人物","离","demo","置信度","速度",":","tune","模式","从","用户","head","敌方","的","hook","倍率","启动","启动器","头部","x","torch"],"title":"后 端 脚本","title_tokens":["端","后","脚本"," "]},{"location":"get-start/installation/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["技术"," ","难点"]},{"location":"get-start/installation/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["美化","。","实现","解决","使用","ttkbootstrap","：","库","了"," "],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":["库","设计","老旧","风格","1",".","的","标准","tkinter","python","gui"," "]},{"location":"get-start/installation/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["，","调和","冲突","文件","：","pythonw","以","前端","隐藏","循环","脚本","。","通过","解决","分离","终端","关闭","独立","方式","保存","loop","完全","json","前后","传递"," ","并","执行","参数","打开","与","start","import","多个","阻塞","后","、","调用函数","函数","难以","进程","的","调用","端"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["参数","传递",".","问题","端","前后","2"," "]},{"location":"get-start/installation/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["0.02","将","目标","可以","种","aim","：","需要","vega","进行","。","最早","选择","（","作用","calc","我们","方式","测试","集成显卡","移动","）","次","小于",")","截图","都","5","0.12","截屏","情况","、","系","rtx3070","pydirectinput","不计","下单","高","作为","独显","计算","amd","部分","yolov5s","最终","显卡","0.008","pyqt5","时延","至","射击","瞄准","忽略不计","差","约","cpu","解决","游戏","了"," ","并","0.06","这么","模拟","最后","0.2","端","延迟","准度","核显","保证","下","中","性能","几乎","毫无","在","敌人","(","版本","主力","库函数","0.4","模型","graphics","迭代","优化","gpu","0.005","反复","多次","only","多种","位置","代码","-","紧张","环节","多个","5800h","使","cuda","迁移","6m","rtx30","最快","_","函数","对","鼠标","耗时","到","0.5","，","0.09","r7","改动","毫无作用","秒","识别","花费","集成","速度","yolov5n","从","和","用户","head","确立","忽略","最佳","研究","的","精准度","启动","精准","启动器","应对","单次"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["3","时间","时间延迟",".","高","延迟","单次","瞄准"," "]},{"location":"get-start/installation/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["精确度","，","下","仅","实际","射击","运行","时","性能","：","矩形","瞄准","。","矩形框","通过","需求","游戏","识别","解决","十分","模型","大致","调整","了"," ","人物","并","可观","自行","速度","设计","位置","使用","和","提供","实时","确定","精确","自行设计","情况","根据","影响","函数","考虑","的","计算","头部","最终","到"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":["预",".","仅","矩形框","矩形","模型","提供","训练","4"," ","人物"]},{"location":"get-start/installation/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["，","输入","同时","记录","中","：","其","有关","在","约","pytorch","回归","进行","。","内","原始","偏移","解决","灵敏","组","游戏","我们","关闭","模型","20","测试","基本","“","得到","了","移动"," ","并","参数","自行","反复",":","go","与","连接","加速","变换","选项","和","灵敏度","出现","后","确定","全","、","接受","cs","导致","”","搭建","定性","鼠标","过大时","单层","倍率","敏度","最终","关系"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":["cs",":","go",".","偏移","鼠标","问题","5"," "]},{"location":"get-start/installation/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":[" ","日志","开发"]},{"location":"get-start/installation/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["启动","前端"," ","启动器"]},{"location":"get-start/installation/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["下次","，","不","待","将","快捷","运行","可以","时","进一步","无需","显示","在","体验","改动","内","通过","快捷键","（","游戏","关闭","测试","切换","了"," ","优化","参数","）","生效","修复","使用","语音","改变","用户","后","2","/","弹窗","提示","bug","启动","启动器","端","若","个","一步"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["10",":",".","6","-","0.3","16","08"," ","7"]},{"location":"get-start/installation/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["，","时","显示","在","内","选择","灵敏","游戏","保持"," ",":","go","与","调节器","灵敏度","用户","cs","鼠标","的","保持一致","提高","调节","精准度","精准","敏度","一致","准度"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":["19",":",".","-","0.3","54","14","5"," ","7"]},{"location":"get-start/installation/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["，","提示","指引","方式","使用","设置","用户","体验"," ","优化","弹窗"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["3",":","15",".","37","-","0.3","14"," ","7"]},{"location":"get-start/installation/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["，","同时","数传","参数传递","运行","之后","python","会","pythonw","避免","隐藏","前端","窗口","隐藏式","程序","脚本","。","（","改为","关闭","json","藏式","传递"," ","腾讯",">","参数","）","设计","与","线程","start","beta","也","端的","-","不再","阻塞","模式","选项","后","完成","结束","类似","会议","增加","变为","端","启动","动态","新","启动器","按钮"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":[":","1",".","-","0.3","14","30"," ","7"]},{"location":"get-start/installation/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["，","ttkbootstrap","normal","。","选择","（","游戏","方式","模型","现代"," ","demo","）","及","扁平化","扁平","重构","使用","界面","平化","、","增加","提示","现代化","或","启动"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["51",":",".","-","13","0.3","22","0"," ","7"]},{"location":"get-start/installation/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["前端","启动","启动器","tkinter","使用","完成"," ","开发"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":[":","23","0.2",".","-","13","0","11"," ","7"]},{"location":"get-start/installation/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["端","后","脚本"," "]},{"location":"get-start/installation/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["，","修复","时延","演示","1","减少","的","补偿","bug","动态","流程","算法","模式","个","了"," ","优化"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["3","19",":",".","-","0.3","7.15","32"," "]},{"location":"get-start/installation/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["，","输入","适配","灵敏","调整","移动"," ",":","go","算法","灵敏度","用户","根据","cs","的","鼠标","提高","精准度","精准","敏度","准度"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":[":","23",".","-","0.3","7.14","11","2"," "]},{"location":"get-start/installation/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["，","数传","全屏","参数传递","前端","。","识别","json","并"," ","传递","标框","参数","与","截图","模式","回","实时","完成","改","演示","的","展示","新","范围"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["18",":","1",".","-","0.3","7.14","00"," "]},{"location":"get-start/installation/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["，","运动","分辨率","匀速运动","敌人","分辨","实现","识别","非","初步","了"," ","补偿","修复","真实","辨率","问题","算法","屏幕","匀速","有效","对近","的","动态"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":[":",".","-","0.3","7.14","0","00","56"," "]},{"location":"get-start/installation/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["，","将","最大","时延","至","目标","最近","进一步","由","选择","改为","准星","方式","模型","了"," ","优化","离","cuda","迁移","最佳","的","降低","一步"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":[":","0.2",".","-","7.13","0","32"," ","12"]},{"location":"get-start/installation/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["，","置顶","反应速度","高手","瞄准","持平","。","api","识别","模型","简洁","秒左右","中心","移动"," ","改进","速度","与","位置","流程","截图","使用","修改","、","左右","函数","0.2","反应","屏幕","小窗","鼠标","的","降低","展示","过程","为","opencv","延迟","单次"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":["7.12",":",".","-","0.1","5","21"," ","48"]},{"location":"get-start/installation/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["，","0.5","初代","版本","近","秒","-","0.4","延迟","单次","瞄准"," "],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["7.12",":",".","-","0.1","0","11","14"," "]},{"location":"get-start/installation/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"get-start/installation/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["sys","pyqt5","tkinter","python","ttkbootstrap","numpy","pytorch","(","os","json"," ","pytest","qtwidgets","win32gui","cv2","qtgui","-",")","pickle","pydirectinput",".","time","keyboard","opencv","torch"],"title":"第三方 依赖 库","title_tokens":["第三","依赖","三方","库","第三方"," "]},{"location":"get-start/question/","text":"","text_tokens":[],"title":"遇到 问题","title_tokens":["遇到"," ","问题"]},{"location":"get-start/set-driver/","text":"","text_tokens":[],"title":"配置 驱动器","title_tokens":["配置","驱动","驱动器"," "]},{"location":"get-start/set-sql/","text":"","text_tokens":[],"title":"配置   SQL","title_tokens":["配置","sql"," "]},{"location":"plugin/introduction/","text":"","text_tokens":[],"title":"插件 入门","title_tokens":["入门","插件"," "]},{"location":"plugin/plugins-group/","text":"","text_tokens":[],"title":"插件 组","title_tokens":["插件"," ","组"]},{"location":"plugin/standard-plugin/","text":"","text_tokens":[],"title":"标准 插件","title_tokens":["标准","插件"," "]}]}