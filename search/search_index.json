{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":[".","little","多","扩展","是","简介","量级","可","0","unikeen","机器人","由","轻量"," ","编写","聊天","平台","version","bot","python","-","框架","一个","的","机器","、","1.0","轻量级"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["little","多","扩展","是","量级","可","unikeen","机器人","由","轻量"," ","编写","聊天","平台","bot","python","-","框架","一个","的","机器","、","轻量级"],"title":"简介","title_tokens":["简介"]},{"location":"about/","text":"","text_tokens":[],"title":"关于 本 项目","title_tokens":[" ","关于","项目","本"]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":[")","permit","arising","files","liability","as","connection","software","merge","is","particular","do","the","included","restriction","otherwise","all","charge","dealings","documentation","granted","furnished","damages","modify","whether","above","from","subject","not","substantial","be","purpose","obtaining","copies","any","warranty","action","use","implied","sell","copy","persons","fitness","or","liable","no","merchantability","rights","out","copyright","tort","express","hereby",":","publish","sublicense","whom","shall","and","other","/","for","including","so","c","noninfringement","holders","warranties","this",",","limited","deal","following","provided","permission","(",".","authors","portions","but","conditions","to","mit","unikeen","a","of","limitation","contract"," ","associated","an","notice","kind","event","without","person","free","许可","claim","with","distribute","in","\"","2022"],"title":"授权 许可","title_tokens":[" ","许可","授权"]},{"location":"get_start/AI001/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["原创","与","读取","ai001","运用","以上","pytest","下","最快","apex","cs1.6","捕捉到","反恐","重构","深层","命令","出现","反应","全球","弹窗","中","静态","前台","选取","对以","normal","18","人工智能","cv","腾讯","录制","“","方式","灵敏","7.13","结合","，","方案","下单","战场","也","我们","时延","本次","集","置信","秒左右","出","改变","graphics","经过","）","bug","验证","命令行","性能","：","系统","开发","交互","yolov5m","5800h","作业","降低","日志","asr","合适","保证","过大时","cv2","需要","非","展示","s","风格","库","aim","重复","核显","有效","此类","变为","一般","0.008","接受","截屏","cs","一组","cuda","彭梦龙","忽略","分辨","不胜","匀速运动","语音","或许","倍率","11","移动","0.06","/","存在","每","需求","解决","人称","特殊","前端","影响","运行","执行","对","仅","sjtu","00","预","12","通过","画面","秒","作为","(","launcher","第一次","忽略不计","优化","aiming","现代化","若","展现","ppt","qimagetocvmat","leq","辨率","小组","尽量","小","设计","原始","最后","os","内","矩形","到","后续","19","后","0.4","采取","...","功能","特点","调节器","标框","主程序"," ","当","yolov5n","信息","指定","多种","省去","根据","pickle","python","搭建",">","多款","框架","相关","及","毫无","计算",")","audio","ttkbootstrap","opencv","信度","单次","个","修改","基本","改","click","完成","打开","calc","显卡","回归","不同","撰写","扁平化","人物","13","主要","14","鼠标","语句","独立","running","而是","反应速度","directory","可以","gui","cpu","敌人","每次","算法","现代","0.12","单独","高手","分析","初步","gpu","only","回","json","一致","启动器","截图","演示","于","不","负责","_","精确","偏移","调用","时间延迟","库函数","《","客户端","神经网络","设备","缩小","最近","22","打标","攻势","神经","import","减少","平台","状态","自动","5","指引","组件","隐藏","人脑","反复",":","对近","反作弊","主体","真实","确立","会","1","供","次","网络","集成显卡","保持","rtx30","客户","老旧","绘制","ttk","hook","》","得到","相同","紧张","智能","第一人称","精确度","输入","位于","最早","延迟","普通","切换","实施","实时","关闭",".","目标","这么","等","load","30","console","且","构建","进行","第三方","amd","一步","发生","辅助","初代","捕捉","模式","借鉴","7.15","​","不计","窗口","待","py","耗时","精准","调用函数","仅供","缩短","win32gui","主力","和","匀速","适配","4","依赖","生效","数传","来自","关系","冲突","瞄准","键盘","终端","分离","情况","美化","全","0.1","直接","行为","加速","。","0.005","0.5","多次","ultralytics","10","rtx3070","try","同时","训练","keyboard","离","矩形框","无","界面","增加","legends","torch","如下","多个","为","改动","防不胜防","都","会议","高","研究","其","点击","组员","公司","tune","捉","考虑","48","说明","结束","流程图","难以","左右","bin","rtx3080","qtwidgets","hub","思路","需","避免","go","端的","08","3","ai","附录","参与","openvino","可","可观","定位","0.02","ratiobutton","射击","switch","loop","系","技术","速度","改为","选择","54","tkinter","范围","过程","有","20","实现","调和","本","函数","pythonw","参数传递","条","导致","物体","有关","按钮","各","平化","隐藏式","按下","事件","独显","位置","cd","传统","21","按","体验","提高","小窗","yolov5s","0.09","格式","反恐精英","”","不再","fps","选项","补偿","流程","快捷","在","时会","监听","模拟","7","设置","阻塞","32","引发","数据","15","r7","pyqt5","头部","迭代","汇报","frame","原理","进程","提供","7.14","37","最初","保持一致","启动","时间","vega","screenindo","文件","except","由于","问题","调整","了","保存","作用","麻烦","（","$","0.3","函数调用","head","加以","pytorch","捉到","屏幕","自行设计","中心","beta","识别","实际","得出","测试程序","scale","朱烨","自行","最佳","转换","敌方","作弊","深刻","一次","第三","线程","新型","[","几乎","多重","种","内存","三方","程序","使用","demo","yolov5","进一步","传递","未来","精度","连接","从","课程","版本","但","分辨率","51","嵌套","上述","架构","这一","应对","组","扁平","全屏","运动","7.12","实验","pt","简洁","举报","程序开发","孙瑜杰","时","毫无作用","23","sys","16","实测","十分","至","变换","花费","新","均","、","脚本","传入","动态","推荐","若无则","定性","]","下载","循环","端","提示","准星","约","56","神经网","标题","灵敏度","精准度","文档","由","显示","代码","大致","ui","模型","所有","标准","部分","\\","pydirectinput","单层","差","并","或","x","置信度","两次","调节","注","持平","确定","测试","类似","被","报错","将","下次","藏式","记录","使","小于","参数","共享","精英","较","完全","之后","0","人工","视频","上","6m","用户","时有","最大","检测","准度","近","0.2","无需","环节","以","差异","制作","2","定义","集成","获取","api","敏度","status","迁移","快捷键","意识","布局","置顶","如","numpy","用于","第一","若无","start","最终","time","分工","moveto","改进","概要","程序运行","前后","目录","6","游戏","基于","修复","-","的","qtgui","键时","难点"],"title":"AI001","title_tokens":["ai001"]},{"location":"get_start/AI001/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["组员","："," ","彭梦龙","朱烨","、","孙瑜杰"],"title":"FPS - AI - Aiming","title_tokens":["ai"," ","aiming","-","fps"]},{"location":"get_start/AI001/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["加速","与","。","读取","ai001","作弊","单次","深刻","运用","新型","同时","训练","内存","程序","界面","反恐","yolov5","未来","显卡","为","从","不同","课程","反应","改动","扁平化","防不胜防","但","全球","中","静态","鼠标","这一","扁平","运动","而是","对以","举报","可以","人工智能","公司","敌人","cv","现代","考虑","单独","分析","、","难以","0.1","方式","灵敏","动态","结合","，","json","下单","启动器","演示","于","不","端","战场","也","go","我们","时延","本次","神经网","ai","可观","灵敏度","精准度","《","出","神经网络","经过","）","缩小","射击","验证","ui","：","攻势","系","技术","神经","作业","\\","合适","平台","并","或","s","过程","人脑","有","反复",":","实现","此类","反作弊","本","调节","一般","确定","物体","被","cs","将","不胜","记录","次","平化","参数","匀速运动","共享","或许","rtx30","精英","网络","移动","位置","存在","传统","人工","人称","》","前端","影响","相同","对","用户","时有","sjtu","智能","第一人称","反恐精英","检测","fps","准度","延迟","流程","近","在","普通","通过","模拟","画面","实时","差异","设置","数据","优化","现代化","原理","展现","且","提供","敏度","leq","小组","尽量","设计","启动","辅助","到","模式","后","意识","​","用于","第一","功能","了","特点","（","$"," ","精准","仅供","缩短","pytorch","前后","游戏","和","匀速","适配","识别","实际","基于","瞄准","分离","多款","的","框架"],"title":"概要","title_tokens":["概要"]},{"location":"get_start/AI001/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["与","单次","第三","10","训练","矩形框","三方","程序","传递","人物","51","13","14","架构","高","鼠标","7.12","孙瑜杰","gui","23","18","16","48","脚本","0.1","7.13","方案","启动器","端","go","08","3","偏移","56","ai","附录","时间延迟","22","模型","标准","开发","技术","日志","54","tkinter","5","风格",":","库","实现","cs","彭梦龙","1","参数","11","0","老旧","21","前端","仅","00","预","fps","延迟","12","0.2","7",".","32","15","2","aiming","30","第三方","提供","小组","37","7.14","设计","启动","矩形","时间","19","后","7.15","功能","问题","0.3"," ","分工","概要","前后","目录","6","4","依赖","瞄准","python","-","朱烨","的","难点"],"title":"目录","title_tokens":["目录"]},{"location":"get_start/AI001/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["分工","小组"," "]},{"location":"get_start/AI001/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["灵敏","与","等","主体","本","，","优化","测试","真实","迭代","启动器","演示","负责","端","思路","获取","提供","分辨","辨率","敏度","最初","程序","参数","启动","参与","灵敏度","完成","文档","后","版本","）","代码","撰写","了","前端","窗口","分辨率","中","（","模型"," ","鼠标","开发","实验","日志","、","游戏","得出","关系","通过","的","脚本"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"get_start/AI001/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["灵敏","与","。","等","主体","，","测试","迭代","实现","cs","启动器","演示","负责","端","思路","go","提供","敏度","程序","设计","参数","参与","启动","灵敏度","传递","客户端","模式","后","客户","视频","了","窗口","前端","中"," ","鼠标","开发","交互","实验","前后","信息","脚本","游戏","录制","得出","关系","通过",":","的","、"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"get_start/AI001/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["数据","本","制作","，","测试","汇报","思路","ppt","也","训练","apex","cs1.6","程序","使用","集","legends","较","可观","文档","精度","后","不同","）","由于","上","问题","了","流程图","最终","（","中","模型","对","打标"," ","速度","yolov5n","选择","、","和","游戏","适配","流程","并","在","得出","测试程序","的","实现"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"get_start/AI001/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["原创","与","。","计算","加速","audio","第三","ultralytics","[","训练","无","三方","程序","demo","使用","反恐","进一步","yolov5","torch","命令","课程","人物","全球","中","主要","前台","鼠标","pt","running","程序开发","directory","组员","tune","、","脚本","灵敏","bin","若无则","，","]","下载","启动器","演示","端","go","_","ai","调用","可","灵敏度","《","由","）","代码","射击","命令行","性能","switch","：","模型","开发","交互","攻势","\\","asr","平台","并","自动","展示","过程","有",":","库","测试","物体","cs","参数","语音","精英","移动","位置","cd","》","前端","运行","小窗","影响","对","用户","sjtu","反恐精英","预","检测","位于","模拟","画面","关闭","设置","launcher",".","console","若","api","提供","敏度","第三方","一步","启动","捕捉","模式","文件","后","置顶","用于","若无","待","（","py","主程序"," ","yolov5n","目录","游戏","和","识别","来自","基于","-","的"],"title":"程序 架构","title_tokens":[" ","架构","程序"]},{"location":"get_start/AI001/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":[".","bin","。","注","，","若","会","需","程序","使用","ai","启动","如下","运行","py","："," ","程序运行","\\","流程","自动","关闭","流程图","直接","launcher"],"title":"功能 实现 与 技术 方案","title_tokens":["与","方案"," ","技术","实现","功能"]},{"location":"get_start/AI001/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["。","ttkbootstrap","读取","以上","一次","下","try","同时","多重","使用","界面","demo","深层","显卡","为","不同","弹窗","中","嵌套","鼠标","语句","running","时","点击","每次","至","均","说明","脚本","“","灵敏","bin","推荐","，","json","下载","rtx3080","不","避免","端","也","提示","go","_","ai","标题","openvino","可","灵敏度","设备","ratiobutton","显示","改变","）","模型","所有","yolov5m","\\","选择","状态","tkinter","并","自动","组件","风格",":","库","实现","变为","调节","条","被","cs","一组","报错","按钮","会","各","下次","供","参数","较","存在","每","上","ttk","前端","运行","执行","”","在","时会","关闭","设置",".","目标","第一次","引发","frame","构建","提供","敏度","status","小","发生","设计","启动","借鉴","后","except","布局","文件","如","...","用于","第一","了","保存","窗口","麻烦","（","py"," ","yolov5n","pytorch","和","游戏","省去","根据","基于","scale","的","行为","及"],"title":"前端 启动器","title_tokens":["启动"," ","前端","启动器"]},{"location":"get_start/AI001/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["与","。",")","转换","计算","敌方","opencv","读取","信度","下","离","keyboard","捕捉到","使用","demo","yolov5","click","torch","calc","从","人物","分辨率","中","弹窗","上述","选取","高","鼠标","运动","running","tune","捉","实测","、","传入","灵敏","bin","，","json","下单","启动器","hub","截图","go","准星","_","调用","置信","灵敏度","定位","射击","最近","系统","速度","\\","pydirectinput","并","自动","展示","x",":","库","置信度","重复","实现","两次","函数","截屏","cs","将","分辨","次","参数","按下","较","倍率","移动","事件","位置","按","绘制","hook","特殊","前端","对","用户","格式","补偿","流程","在","监听","通过","实施","模拟","(",".","目标","load","优化","定义","pyqt5","头部","获取","qimagetocvmat","api","敏度","辨率","status","原始","启动","后续","到","捕捉","时间","模式","screenindo","后","采取","了","窗口"," ","当","函数调用","head","moveto","加以","win32gui","捉到","指定","屏幕","游戏","识别","根据","键盘","的","相关","键时"],"title":"后 端 脚本","title_tokens":[" ","后","端","脚本"]},{"location":"get_start/AI001/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":[" ","难点","技术"]},{"location":"get_start/AI001/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["了","。","使用","："," ","ttkbootstrap","库","美化","实现","解决"],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":[".","tkinter","gui","设计"," ","标准","python","老旧","风格","库","1","的"]},{"location":"get_start/AI001/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["方式","与","。","调和","函数","，","json","pythonw","循环","端","进程","调用","参数","完全","传递","多个","打开","后","文件","解决","执行","前端","start","保存","："," ","loop","调用函数","独立","import","前后","脚本","并","冲突","通过","终端","隐藏","分离","以","关闭","的","、","难以","阻塞"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":[".","2"," ","参数","传递","端","前后","问题"]},{"location":"get_start/AI001/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["毫无","。","0.005","计算","0.5","最佳","多次",")","单次","rtx3070","下","几乎","最快","种","多个","calc","显卡","从","版本","改动","都","中","高","应对","鼠标","研究","毫无作用","可以","cpu","敌人","至","0.12","花费","、","gpu","only","方式","，","下单","启动器","截图","端","_","约","我们","时延","库函数","精准度","0.02","graphics","）","代码","射击","性能","模型","：","系","速度","5800h","部分","pydirectinput","选择","保证","差","需要","并","5","反复","aim","核显","0.008","函数","测试","截屏","确立","cuda","将","忽略","使","次","小于","集成显卡","rtx30","0.06","移动","独显","位置","解决","6m","yolov5s","对","紧张","0.09","用户","最早","准度","延迟","在","0.2","模拟","环节","秒","作为","(","这么","忽略不计","目标","优化","r7","pyqt5","迭代","集成","进行","amd","最后","启动","vega","到","迁移","0.4","了","作用","最终","耗时","（","不计"," ","精准","head","yolov5n","主力","游戏","和","多种","识别","瞄准","-","情况","的"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":[".","3"," ","时间延迟","瞄准","单次","时间","高","延迟"]},{"location":"get_start/AI001/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["自行","。","计算","函数","，","确定","头部","下","提供","矩形框","精确","使用","设计","矩形","到","可观","位置","需求","大致","射击","解决","调整","人物","影响","了","性能","运行","最终","模型","仅"," ","：","速度","精确度","和","游戏","时","自行设计","并","识别","根据","实际","通过","瞄准","十分","考虑","实时","情况","的"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":[".","人物","矩形框","模型","仅"," ","矩形","预","训练","4","提供"]},{"location":"get_start/AI001/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["加速","。","与","灵敏","自行","定性","，","测试","接受","导致","确定","cs","有关","进行","go","同时","基本","敏度","约","偏移","我们","原始","记录","参数","内","灵敏度","倍率","移动","连接","后","出现","关闭","回归","解决","了","得到","最终","中","模型","："," ","鼠标","组","”","输入","选项","单层","其","pytorch","和","过大时","游戏","并","在","关系","变换","搭建","20",":","反复","全","、","“"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":[".","偏移","5"," ","鼠标","cs",":","go","问题"]},{"location":"get_start/AI001/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":["日志"," ","开发"]},{"location":"get_start/AI001/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["启动"," ","前端","启动器"]},{"location":"get_start/AI001/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["优化","2","，","测试","启动器","个","若","端","将","不","提示","下次","一步","使用","进一步","参数","启动","内","语音","/","后","快捷键","改变","体验","显示","）","bug","改动","了","运行","弹窗","（","待"," ","用户","游戏","生效","时","快捷","可以","在","切换","无需","通过","修复","关闭"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":[".","0.3","16"," ","7","-","10",":","6","08"]},{"location":"get_start/AI001/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["灵敏","与","调节","，","一致","cs","go","敏度","保持一致","内","保持","灵敏度","精准度","显示","提高","调节器","用户"," ","精准","鼠标","准度","选择","游戏","时","在",":","的"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":[".","0.3","5"," ","14","7","19","-",":","54"]},{"location":"get_start/AI001/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["方式","使用","弹窗","优化"," ","，","指引","用户","体验","提示","设置"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":[".","37","3","0.3","15"," ","14","7","-",":"]},{"location":"get_start/AI001/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["与","变为","动态","。","，","json","pythonw","参数传递","类似","启动器","按钮","线程","会","端","避免","端的","也","同时","藏式","程序","设计","增加","参数","隐藏式","启动","之后","完成","传递","模式","后","结束","）","会议","start","运行","前端","（","窗口"," ","改为","不再","选项","腾讯","数传","beta","python","隐藏","-","新",">","关闭","脚本","阻塞"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":[".","0.3"," ","14","30","7","-",":","1"]},{"location":"get_start/AI001/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["方式","。","，","ttkbootstrap","现代化","提示","使用","界面","增加","demo","平化","重构","启动","）","扁平化","（","模型"," ","扁平","选择","游戏","normal","或","现代","、","及"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":[".","22","51","0.3","13"," ","7","0","-",":"]},{"location":"get_start/AI001/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["tkinter","前端","使用"," ","启动","开发","完成","启动器"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":[".","23","0.2","13"," ","7","11","0","-",":"]},{"location":"get_start/AI001/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":[" ","后","端","脚本"]},{"location":"get_start/AI001/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["了","动态","时延","，"," ","优化","算法","修复","模式","个","演示","1","减少","的","bug","补偿","流程"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":[".","32","3","0.3"," ","19","-",":","7.15"]},{"location":"get_start/AI001/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["灵敏","，","cs","go","敏度","灵敏度","精准度","移动","提高","调整"," ","用户","精准","鼠标","输入","准度","适配","根据","算法",":","的"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":[".","7.14","23","0.3"," ","2","11","-",":"]},{"location":"get_start/AI001/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["。","与","回","，","json","参数传递","截图","演示","改","参数","完成","传递","模式","前端","标框"," ","全屏","数传","并","识别","范围","展示","实时","新","的"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":[".","7.14","18","0.3"," ","-","00",":","1"]},{"location":"get_start/AI001/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["动态","，","真实","分辨","辨率","匀速运动","问题","了","分辨率"," ","运动","屏幕","匀速","补偿","识别","敌人","非","算法","修复","对近","初步","的","有效","实现"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":[".","7.14","56","0.3"," ","0","-","00",":"]},{"location":"get_start/AI001/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["目标","最佳","方式","，","优化","cuda","将","离","准星","一步","时延","进一步","迁移","由","了","最近","模型"," ","最大","改为","降低","选择","至","的"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":[".","32","0.2","7.13"," ","0","-",":","12"]},{"location":"get_start/AI001/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["左右","。","与","函数","，","持平","opencv","单次","截图","修改","api","使用","秒左右","移动","为","位置","置顶","反应","小窗","模型"," ","鼠标","改进","速度","简洁","降低","延迟","屏幕","反应速度","流程","中心","识别","0.2","瞄准","展示","高手","过程","的","、"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":[".","21","5"," ","-","7.12",":","48","0.1"]},{"location":"get_start/AI001/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["近","0.5","，"," ","初代","瞄准","单次","秒","-","0.4","延迟","版本"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["."," ","14","11","0","-","7.12",":","0.1"]},{"location":"get_start/AI001/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"get_start/AI001/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":[".",")","json","ttkbootstrap","opencv","pyqt5","qtwidgets","pytest","keyboard","os","torch","numpy","time"," ","win32gui","pytorch","pydirectinput","cv2","tkinter","sys","pickle","python","-","qtgui","("],"title":"第三方 依赖 库","title_tokens":["三方"," ","第三","库","第三方","依赖"]},{"location":"get_start/test/","text":"test","text_tokens":["test"],"title":"test","title_tokens":["test"]},{"location":"get_start/test/#test","text":"","text_tokens":[],"title":"test","title_tokens":["test"]}]}