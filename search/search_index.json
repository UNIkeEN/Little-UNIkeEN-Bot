{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["简介",".","聊天","扩展","little","unikeen","、","由","量级","多","是","轻量","0"," ","轻量级","编写","机器人","框架","一个","1.0","可","-","python","version","平台","bot","的","机器"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["聊天","扩展","little","unikeen","、","由","量级","多","是","轻量"," ","轻量级","编写","机器人","框架","一个","可","-","python","平台","bot","的","机器"],"title":"简介","title_tokens":["简介"]},{"location":"about/","text":"","text_tokens":[],"title":"关于 本 项目","title_tokens":["关于","项目"," ","本"]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":["2022","associated","\"","publish","otherwise","be","granted","fitness","portions","warranty","shall","modify","limited","above","deal","the","whom","files","noninfringement","person","/","in","from","action","and","implied",")","express",".","of","purpose","connection","unikeen","free","as","persons","arising","whether",":","limitation","particular","including","damages","tort","claim","merchantability","contract","mit","obtaining","dealings","substantial","furnished","liability","any","rights","authors","to","other","许可","(","an","with","provided","included","sell","for","do","copy","permit","sublicense","documentation","merge","no","use","copies","all","so","following","but","conditions","holders","charge","out","hereby","is","without","distribute","notice"," ","c","permission","copyright","restriction","this","or","not","event","warranties","kind",",","a","software","subject","liable"],"title":"授权 许可","title_tokens":["授权"," ","许可"]},{"location":"test/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["《","非","我们","leq","主要","日志","其","类似","os","性能","回归","匀速","status","时有","功能","normal","人工","避免","简洁","中","12","核显","重复","为","上述","终端","switch","下载","22","耗时","这一","负责","端的","程序开发","测试","新型","有效","运行","紧张","yolov5","若无则","神经网","撰写","对近","出","6","精准度","分析","会议","启动器","十分","展示","合适","进程","方式","目标",".","0.1","第一人称","和","自行","程序运行","：","通过","置信度","自行设计","切换","tune","第三","yolov5s","后续","apex",":","11","23","若无","导致","》","“","json","键时","真实","根据","采取","事件","相关","显卡","7","都","​","变为","忽略不计","不再","防不胜防","精准","精确","接受","制作","检测","精度","yolov5m","循环","将","打开","游戏","直接","文件","文档","反复","不计","结束","标准","会","frame","函数调用","修改","定义","一致","独立","定位","缩短","保证","调和","所有","构建","pytest","执行","5800h","关闭","scale","移动","...","思路","指引","标题",">","改变","缩小","变换","深层","来自","连接","得到","实测","、","增加","瞄准","一次","头部","现代化","不","测试程序","实验","高手","改进","前端","进行","毫无","隐藏式","适配","显示","时会","原理","搭建","21","pyqt5","布局","的","大致","16","程序","rtx3070","研究","设置","并","在","重构","可观","0.4","实际","前台","仅","启动","实时","保存","反恐精英","客户端","[","ratiobutton","美化","原始","匀速运动","被","关系","一组","物体","体验","$","获取","客户","0.06","若","，","系统","本次","共享","语音","37","弹窗","组件","ui","3","用户","使用","选项","人工智能","补偿","ultralytics","命令","扁平","神经","脚本","下单","全","扁平化","第一","。","pytorch","深刻","一步","多次","绘制","出现","辅助","修复","（","最早","风格","单层","持平","腾讯","-","ai","rtx30","7.13","加速","与","win32gui","调节","作业","验证","过大时","legends","20","only","迭代","次","语句","交互","try","射击","展现","秒","launcher","30","最后","到","(","特殊","qtgui","快捷","ppt","攻势","提高","条","sjtu","head","此类","库函数","7.15","保持","读取","全屏","python","集成显卡","需求","迁移","范围","gpu","gui","人称","定性","aim","流程","格式","进一步","老旧","中心","aiming","0.5","对以","0.2","最近","离","一般","位于","准星","running","32","cv2"," ","api","小组","依赖","vega","部分","辨率","分离","demo","bin","最大","平化","如","多个","08","设备","输入","也","无需","改动","等","命令行","转换","当","模拟","敌方","网络","降低","引发","fps","多种","按钮","对","2","概要","参数传递","情况","或","动态","不胜","最佳","反应速度","初代","位置","go","使","影响","10","速度","待","反作弊","尽量","相同","减少","13","应对","高","time","需","近","sys","且","报错",")","彭梦龙","过程","借鉴","藏式","00","由","下次","考虑","数据","小于","下","运动","流程图","ttkbootstrap","忽略","得出","结合","上","分工","import","公司","最初","汇报","18","bug","供","监听","4","捉到","解决","asr","平台","多款","预","51","15","个","cs1.6","全球","识别","ttk","有","界面","问题","捕捉","numpy","状态","时间延迟","时间","如下","）","而是","这么","反恐","延迟","数传","模式","记录","主程序","存在","于","意识","1","tkinter","6m","未来","7.12","截图","信度","生效","内存","改","hook","花费","每次","行为","本","鼠标","实施","精英","矩形","捕捉到","矩形框","智能","静态","提供","信息","冲突","各","无","参与","指定","19","灵敏度","”","开发","loop","pydirectinput","分辨","组员","\\","调整","初步","主体","从","作为","可","cs","hub","新","注","x","捉","确定","架构","函数","版本","环节","screenindo","加以","隐藏","毫无作用","库","小窗","设计","calc","分辨率","cd","调用函数","54","由于","标框","实现","前后","opencv","集成","audio","作用","s","click","start","时","麻烦","以上","方案","最快","置信","amd","三方","举报","视频","有关","/","完全","点击","0.3","主力","cv","原创","keyboard","pt","敌人","5","qimagetocvmat","同时","秒左右","0.09","之后","作弊","基于","后","说明","选取","不同","需要","保持一致","qtwidgets","差异","56","阻塞","py","改为","按","可以","左右","精确度","传统","except","较","反应","敏度","截屏","屏幕","7.14","基本","beta","pickle","难点","传递","多重","普通","参数","神经网络","训练","48","但","发生","代码","按下","经过","仅供","战场","]","几乎","回","14","课程","0.12","0.008","线程","最终","键盘","偏移","rtx3080","人脑","系","计算","moveto","确立","倍率","算法","准度","两次","至","pythonw","运用","目录","差","torch","快捷键","录制","特点","选择","提示","朱烨","端","推荐","种","单次","yolov5n","框架","均","完成","小","0.005","graphics","调节器","演示","第三方","人物","了","置顶","现代","openvino","自动","嵌套","load","优化","附录","cuda","r7","时延","_","cpu","技术","打标","省去","灵敏","或许","调用","0.02","0","模型","每","及","组","用于","集","以","console","ai001","单独","独显","第一次","传入","内","directory","约","画面","窗口","孙瑜杰","难以"],"title":"优秀 插件 示例","title_tokens":["插件","示例"," ","优秀"]},{"location":"test/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["："," ","组员","朱烨","孙瑜杰","彭梦龙","、"],"title":"FPS - AI - Aiming","title_tokens":["ai"," ","fps","aiming","-"]},{"location":"test/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["《","设置","并","网络","我们","在","leq","fps","可观","实际","匀速","启动","设计","实时","时有","对","反恐精英","功能","人工","中","或","动态","不胜","实现","前后","为","s","位置","go","影响","匀速运动","被","反作弊","尽量","相同","这一","物体","新型","举报","$","，","yolov5","本次","共享","cv","神经网","出","敌人","精准度","ui","分析","启动器","近","用户","同时","且","合适","方式","人工智能","0.1","作弊","第一人称","基于","过程","后","扁平","和","不同","：","下单","通过","神经","考虑","差异","扁平化","数据","第一","。","pytorch","深刻","可以","运动","传统",":","辅助","结合","（","》","json","反应","敏度","公司","ai","rtx30","显卡","加速","与","调节","作业","验证","平台","普通","参数","​","多款","神经网络","训练","但","全球","识别","经过","次","有","精准","界面","防不胜防","仅供","战场","检测","）","课程","而是","反恐","延迟","将","射击","游戏","模式","展现","记录","存在","于","人脑","意识","系","到","反复","准度","未来","内存","攻势","运用","sjtu","本","鼠标","此类","缩短","精英","特点","读取","端","智能","静态","单次","移动","框架","人称","缩小","提供","演示","流程","了","现代","对以","优化","、","时延","灵敏度","一般","技术","瞄准","灵敏","或许","现代化","不"," ","\\","小组","用于","分离","ai001","前端","单独","从","平化","适配","cs","原理","画面","也","改动","的","确定","程序","难以","模拟"],"title":"概要","title_tokens":["概要"]},{"location":"test/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["日志","fps","库","仅","启动","设计","2","功能","概要","54","12","实现","前后","go","10","方案","22","架构","13","三方","高","0.3","37","6","5","3","启动器",".","彭梦龙","0.1","后","00","脚本","56","第三",":","11","23","风格","分工","-","ai","7","18","7.13","与","7.14","难点","4","传递","参数","预","51","训练","15","48","问题","时间延迟","时间","14","延迟","偏移","30","1","tkinter","7.12","标准","目录","鼠标","7.15","矩形","朱烨","端","矩形框","python","单次","gui","提供","第三方","人物","老旧","aiming","0.2","附录","19","开发","技术","瞄准","32","0","模型"," ","小组","依赖","前端","cs","08","孙瑜杰","21","的","16","程序"],"title":"目录","title_tokens":["目录"]},{"location":"test/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["小组","分工"," "]},{"location":"test/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["代码","启动器","迭代","提供","演示","日志","版本","了","参与","后","启动","优化","）","、","脚本","游戏","分辨率","通过","灵敏度","开发","中","文档","灵敏","分辨","得出","模型"," ","实验","（","关系","主体","辨率","负责","敏度","本","最初","前端","真实","鼠标","测试","获取","与","，","端","撰写","窗口","等","参数","的","思路","程序","完成"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"test/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["启动器","迭代","提供","演示","信息","了","交互","参与","后","启动","设计","、","客户端","脚本","模式","游戏","通过","灵敏度","开发","中","。","实现","前后","灵敏","go",":","得出"," ","实验","关系","主体","负责","敏度","前端","鼠标","测试","视频","客户","cs","录制","与","，","端","窗口","传递","参数","等","的","思路","程序"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"test/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["legends","并","cs1.6","在","流程","可观","了","问题","使用","制作","精度","后","）","、","和","对","最终","不同","游戏","数据","由于","中","打标","实现","文档","流程图","apex","得出","测试程序","模型"," ","ppt","（","速度","上","较","集","本","测试","适配","汇报","选择","，","也","yolov5n","的","思路","程序","训练"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"test/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["设置","《","并","主要","性能","库","前台","小窗","启动","反恐精英","对","cd","[","中","audio","位置","go","影响","switch","待","下载","物体","程序开发","三方","测试","运行","若","，","yolov5","若无则","语音","原创","pt","启动器","用户","展示","使用",".","ultralytics","基于","命令","后","过程","和","由","脚本","：","tune","py","。","第三","一步",":","若无","（","》","敏度","-","ai","加速","与","asr","平台","参数","预","训练","代码","全球","识别","有","捕捉","交互","检测","]","）","课程","反恐","射击","游戏","主程序","launcher","模式","文件","计算","攻势","目录","sjtu","torch","鼠标","精英","端","关闭","移动","yolov5n","提供","演示","第三方","人物","进一步","置顶","无","自动","来自","、","灵敏度","_","开发","位于","灵敏","running","调用","模型"," ","组员","\\","api","用于","demo","console","bin","前端","可","cs","directory","画面","命令行","的","程序","模拟"],"title":"程序 架构","title_tokens":["程序"," ","架构"]},{"location":"test/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["流程","使用",".","自动","启动","如下","程序运行","：","直接","launcher","py","。","流程图"," ","\\","会","bin","ai","运行","若","，","需","注","关闭","程序"],"title":"功能 实现 与 技术 方案","title_tokens":["功能"," ","与","方案","技术","实现"]},{"location":"test/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["设置","并","在","引发","status","库","按钮","启动","设计","保存","ratiobutton","避免","中","实现","为","go","时","麻烦","以上","下载","被","一组","点击","运行","，","弹窗","组件","同时","报错","目标","使用",".","基于","借鉴","后","说明","和","不同","脚本","下次","第一","。","py","pytorch","下","ttkbootstrap",":","except","（","上","较","风格","“","json","敏度","根据","ai","显卡","供","调节","多重","参数","变为","发生","ttk","界面","语句","状态","try","yolov5m","）","游戏","rtx3080","存在","文件","tkinter","会","至","frame","条","每次","行为","鼠标","提示","选择","所有","构建","读取","推荐","执行","端","scale","关闭","yolov5n","...","均","标题","小","改变","提供","各","深层","了","openvino","自动","嵌套","”","灵敏度","_","省去","灵敏","running","一次","不","每"," ","模型","及","\\","用于","demo","bin","前端","第一次","可","如","cs","显示","时会","设备","窗口","也","布局","的"],"title":"前端 启动器","title_tokens":["前端","启动","启动器"," "]},{"location":"test/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["并","在","函数","screenindo","加以","status","库","启动","calc","对","分辨率","中","实现","重复","opencv","上述","位置","go","click","原始","速度","置信","获取","高","系统","，","yolov5","keyboard","弹窗","启动器","qimagetocvmat","用户","展示",")","使用",".","目标","补偿","后","选取","下单","通过","置信度","tune","。","下","按","后续","运动","绘制",":","较","json","键时","敏度","根据","采取","事件","相关","截屏","屏幕","与","win32gui","监听","捉到","参数","按下","识别","次","捕捉","模拟","时间","将","模式","游戏","键盘","射击","到","计算","moveto","倍率","(","特殊","截图","信度","hook","两次","函数调用","head","torch","鼠标","定义","实施","定位","读取","捕捉到","移动","格式","流程","人物","了","指定","自动","load","优化","实测","、","最近","灵敏度","_","离","准星","running","灵敏","头部","pydirectinput","调用","分辨"," ","\\","api","辨率","demo","bin","从","前端","传入","cs","hub","窗口","pyqt5","捉","x","的","转换","当","敌方"],"title":"后 端 脚本","title_tokens":["脚本","后","端"," "]},{"location":"test/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["难点"," ","技术"]},{"location":"test/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["："," ","了","解决","使用","。","实现","库","ttkbootstrap","美化"],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":[" ","标准","风格","python",".","老旧","的","库","1","tkinter","gui","设计"]},{"location":"test/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["并","函数","冲突","进程","方式","隐藏","后","循环","、","打开","保存","脚本","：","通过","调用函数","阻塞","文件","。","loop","前后","终端","调用","start"," ","以","分离","pythonw","json","import","前端","独立","完全","多个","调和","与","，","端","执行","解决","传递","关闭","参数","的","难以"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["2"," ","端","问题",".","传递","参数","前后"]},{"location":"test/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["并","我们","在","函数","版本","环节","0.4","性能","多种","毫无作用","启动","calc","对","情况","中","核显","最佳","集成","作用","位置","使","速度","最快","耗时","amd","测试","应对","0.06","高","，","紧张","主力","敌人","精准度","5","启动器","用户","方式","0.09",")","目标","和","需要","下单","：","小于","。","下","yolov5s","可以","多次","忽略","（","最早","-","rtx30","显卡","截屏","解决","都","忽略不计","代码","only","迭代","识别","次","精准","几乎","）","0.12","这么","将","延迟","最终","射击","游戏","秒","0.008","最后","系","到","计算","确立","反复","不计","(","6m","准度","截图","至","花费","head","差","鼠标","库函数","保证","选择","端","集成显卡","5800h","种","迁移","单次","移动","yolov5n","gpu","0.005","aim","graphics","了","0.5","0.2","优化","、","cuda","r7","时延","_","cpu","瞄准","pydirectinput","0.02","模型"," ","vega","部分","从","独显","进行","毫无","作为","多个","约","pyqt5","改动","的","研究","rtx3070","模拟"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["延迟","高"," ",".","瞄准","单次","时间延迟","时间","3"]},{"location":"test/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["并","十分","提供","识别","函数","人物","可观","了","精确","性能","使用","实际","仅","设计","实时","和","自行","最终","：","游戏","通过","大致","射击","考虑","自行设计","情况","瞄准","到","下","计算","。","精确度","头部","位置","影响","模型"," ","时","速度","调整","根据","矩形","运行","，","矩形框","需求","解决","的","确定"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":["模型"," ","矩形","提供","人物","矩形框","4",".","预","仅","训练"]},{"location":"test/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["20","定性","并","我们","在","变换","其","同时","了","接受","回归","选项","连接","后","得到","、","自行","和","最终","：","游戏","记录","偏移","灵敏度","”","全","中","。","pytorch","反复","倍率","灵敏","出现","go",":","导致","模型"," ","原始","组","“","单层","关系","敏度","内","鼠标","进行","测试","有关","cs","加速","约","，","与","基本","解决","输入","搭建","关闭","参数","移动","确定","过大时"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":[":","cs"," ","偏移","问题",".","鼠标","5","go"]},{"location":"test/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":["开发","日志"," "]},{"location":"test/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["前端","启动","启动器"," "]},{"location":"test/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["启动器","改变","用户","在","进一步","了","使用","后","启动","优化","）","将","2","游戏","通过","下次","切换","一步","可以","生效","修复"," ","时","快捷","不","（","待","内","测试","体验","快捷键","/","显示","bug","运行","提示","，","若","端","语音","弹窗","无需","改动","参数","关闭","个"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["7",":","10"," ","08","0.3",".","6","16","-"]},{"location":"test/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["用户","调节器","在","精准","游戏","保持一致","灵敏度","灵敏","准度","go",":"," ","时","提高","敏度","内","鼠标","一致","cs","显示","选择","，","与","调节","保持","的","精准度"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":["7",":"," ","19","0.3","14","54",".","5","-"]},{"location":"test/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["设置"," ","提示","用户","，","方式","使用","弹窗","优化","指引","体验"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["7",":"," ","0.3","14","37",".","15","3","-"]},{"location":"test/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["会议",">","启动器","不再","同时","类似","选项","隐藏","之后","按钮","藏式","后","启动","线程","）","设计","数传","脚本","模式","避免","参数传递","增加","阻塞","改为","。","动态","结束","start"," ","（","会","json","端的","pythonw","前端","腾讯","隐藏式","-","运行","beta","与","，","端","新","python","窗口","也","传递","关闭","参数","程序","变为","完成"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":["7",":"," ","30","0.3",".","1","14","-"]},{"location":"test/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["重构","界面","方式","使用","现代","启动","）","、","扁平","游戏","normal","增加","扁平化","。","或","ttkbootstrap","现代化","模型"," ","及","（","demo","平化","提示","选择","，"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["7","0",":"," ","0.3","22",".","51","13","-"]},{"location":"test/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["启动器"," ","开发","使用","前端","tkinter","启动","完成"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":["7","0","11",":"," ","23",".","0.2","13","-"]},{"location":"test/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["脚本","后","端"," "]},{"location":"test/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["时延","模式","修复"," ","bug","演示","，","流程","了","算法","动态","补偿","减少","的","1","优化","个"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["7.15",":"," ","19","0.3",".","32","3","-"]},{"location":"test/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["用户","精准","灵敏度","算法","灵敏","准度","go",":"," ","提高","调整","敏度","鼠标","根据","适配","cs","，","输入","移动","的","精准度"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":["2",":","23","11"," ","7.14","0.3",".","-"]},{"location":"test/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["并","演示","展示","识别","回","实时","数传","模式","的","参数传递","。","标框","截图","改"," ","json","前端","，","全屏","与","新","传递","参数","范围","完成"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["00","18",":"," ","7.14","0.3",".","1","-"]},{"location":"test/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["非","敌人","识别","了","问题","匀速","补偿","分辨率","动态","实现","算法","运动","分辨","修复"," ","匀速运动","初步","辨率","真实","有效","屏幕","，","对近","的"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":["00","0",":"," ","7.14","56","0.3",".","-"]},{"location":"test/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["降低","进一步","了","目标","方式","优化","将","cuda","由","时延","最近","离","改为","一步","最佳","准星","模型"," ","至","最大","选择","，","迁移","的"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":["7.13","0",":"," ",".","12","0.2","32","-"]},{"location":"test/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["降低","流程","函数","识别","展示","秒左右","置顶","使用","中心","0.2","小窗","过程","、","延迟","简洁","。","瞄准","反应速度","为","左右","opencv","位置","截图","模型"," ","速度","api","高手","改进","反应","修改","鼠标","持平","屏幕","，","与","单次","移动","的"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":[":"," ",".","21","0.1","48","5","7.12","-"]},{"location":"test/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["延迟","近"," ","秒","，","版本","0.4","瞄准","单次","0.5","初代","-"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["0","11",":"," ",".","0.1","14","7.12","-"]},{"location":"test/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"test/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["os","sys",")",".","numpy","qtwidgets","pytorch","opencv","(","tkinter","ttkbootstrap","qtgui","pydirectinput","cv2"," ","json","torch","-","pytest","win32gui","time","pickle","python","keyboard","pyqt5"],"title":"第三方 依赖 库","title_tokens":[" ","第三方","依赖","第三","库","三方"]},{"location":"api/auth-config/","text":"","text_tokens":[],"title":"鉴权 与 功能 配置","title_tokens":["功能"," ","与","鉴权","配置"]},{"location":"api/draw-card/","text":"","text_tokens":[],"title":"响应 卡片 绘制","title_tokens":[" ","卡片","绘制","响应"]},{"location":"get-start/deployment/","text":"","text_tokens":[],"title":"部署   Bot","title_tokens":[" ","部署","bot"]},{"location":"get-start/installation/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["《","非","我们","leq","主要","日志","其","类似","os","性能","回归","匀速","status","时有","功能","normal","人工","避免","简洁","中","12","核显","重复","为","上述","终端","switch","下载","22","耗时","这一","负责","端的","程序开发","测试","新型","有效","运行","紧张","yolov5","若无则","神经网","撰写","对近","出","6","精准度","分析","会议","启动器","十分","展示","合适","进程","方式","目标",".","0.1","第一人称","和","自行","程序运行","：","通过","置信度","自行设计","切换","tune","第三","yolov5s","后续","apex",":","11","23","若无","导致","》","“","json","键时","真实","根据","采取","事件","相关","显卡","7","都","​","变为","忽略不计","不再","防不胜防","精准","精确","接受","制作","检测","精度","yolov5m","循环","将","打开","游戏","直接","文件","文档","反复","不计","结束","标准","会","frame","函数调用","修改","定义","一致","独立","定位","缩短","保证","调和","所有","构建","pytest","执行","5800h","关闭","scale","移动","...","思路","指引","标题",">","改变","缩小","变换","深层","来自","连接","得到","实测","、","增加","瞄准","一次","头部","现代化","不","测试程序","实验","高手","改进","前端","进行","毫无","隐藏式","适配","显示","时会","原理","搭建","21","pyqt5","布局","的","大致","16","程序","rtx3070","研究","设置","并","在","重构","可观","0.4","实际","前台","仅","启动","实时","保存","反恐精英","客户端","[","ratiobutton","美化","原始","匀速运动","被","关系","一组","物体","体验","$","获取","客户","0.06","若","，","系统","本次","共享","语音","37","弹窗","组件","ui","3","用户","使用","选项","人工智能","补偿","ultralytics","命令","扁平","神经","脚本","下单","全","扁平化","第一","。","pytorch","深刻","一步","多次","绘制","出现","辅助","修复","（","最早","风格","单层","持平","腾讯","-","ai","rtx30","7.13","加速","与","win32gui","调节","作业","验证","过大时","legends","20","only","迭代","次","语句","交互","try","射击","展现","秒","launcher","30","最后","到","(","特殊","qtgui","快捷","ppt","攻势","提高","条","sjtu","head","此类","库函数","7.15","保持","读取","全屏","python","集成显卡","需求","迁移","范围","gpu","gui","人称","定性","aim","流程","格式","进一步","老旧","中心","aiming","0.5","对以","0.2","最近","离","一般","位于","准星","running","32","cv2"," ","api","小组","依赖","vega","部分","辨率","分离","demo","bin","最大","平化","如","多个","08","设备","输入","也","无需","改动","等","命令行","转换","当","模拟","敌方","网络","降低","引发","fps","多种","按钮","对","2","概要","参数传递","情况","或","动态","不胜","最佳","反应速度","初代","位置","go","使","影响","10","速度","待","反作弊","尽量","相同","减少","13","应对","高","time","需","近","sys","且","报错",")","彭梦龙","过程","借鉴","藏式","00","由","下次","考虑","数据","小于","下","运动","流程图","ttkbootstrap","忽略","得出","结合","上","分工","import","公司","最初","汇报","18","bug","供","监听","4","捉到","解决","asr","平台","多款","预","51","15","个","cs1.6","全球","识别","ttk","有","界面","问题","捕捉","numpy","状态","时间延迟","时间","如下","）","而是","这么","反恐","延迟","数传","模式","记录","主程序","存在","于","意识","1","tkinter","6m","未来","7.12","截图","信度","生效","内存","改","hook","花费","每次","行为","本","鼠标","实施","精英","矩形","捕捉到","矩形框","智能","静态","提供","信息","冲突","各","无","参与","指定","19","灵敏度","”","开发","loop","pydirectinput","分辨","组员","\\","调整","初步","主体","从","作为","可","cs","hub","新","注","x","捉","确定","架构","函数","版本","环节","screenindo","加以","隐藏","毫无作用","库","小窗","设计","calc","分辨率","cd","调用函数","54","由于","标框","实现","前后","opencv","集成","audio","作用","s","click","start","时","麻烦","以上","方案","最快","置信","amd","三方","举报","视频","有关","/","完全","点击","0.3","主力","cv","原创","keyboard","pt","敌人","5","qimagetocvmat","同时","秒左右","0.09","之后","作弊","基于","后","说明","选取","不同","需要","保持一致","qtwidgets","差异","56","阻塞","py","改为","按","可以","左右","精确度","传统","except","较","反应","敏度","截屏","屏幕","7.14","基本","beta","pickle","难点","传递","多重","普通","参数","神经网络","训练","48","但","发生","代码","按下","经过","仅供","战场","]","几乎","回","14","课程","0.12","0.008","线程","最终","键盘","偏移","rtx3080","人脑","系","计算","moveto","确立","倍率","算法","准度","两次","至","pythonw","运用","目录","差","torch","快捷键","录制","特点","选择","提示","朱烨","端","推荐","种","单次","yolov5n","框架","均","完成","小","0.005","graphics","调节器","演示","第三方","人物","了","置顶","现代","openvino","自动","嵌套","load","优化","附录","cuda","r7","时延","_","cpu","技术","打标","省去","灵敏","或许","调用","0.02","0","模型","每","及","组","用于","集","以","console","ai001","单独","独显","第一次","传入","内","directory","约","画面","窗口","孙瑜杰","难以"],"title":"安装","title_tokens":["安装"]},{"location":"get-start/installation/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["："," ","组员","朱烨","孙瑜杰","彭梦龙","、"],"title":"FPS - AI - Aiming","title_tokens":["ai"," ","fps","aiming","-"]},{"location":"get-start/installation/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["《","设置","并","网络","我们","在","leq","fps","可观","实际","匀速","启动","设计","实时","时有","对","反恐精英","功能","人工","中","或","动态","不胜","实现","前后","为","s","位置","go","影响","匀速运动","被","反作弊","尽量","相同","这一","物体","新型","举报","$","，","yolov5","本次","共享","cv","神经网","出","敌人","精准度","ui","分析","启动器","近","用户","同时","且","合适","方式","人工智能","0.1","作弊","第一人称","基于","过程","后","扁平","和","不同","：","下单","通过","神经","考虑","差异","扁平化","数据","第一","。","pytorch","深刻","可以","运动","传统",":","辅助","结合","（","》","json","反应","敏度","公司","ai","rtx30","显卡","加速","与","调节","作业","验证","平台","普通","参数","​","多款","神经网络","训练","但","全球","识别","经过","次","有","精准","界面","防不胜防","仅供","战场","检测","）","课程","而是","反恐","延迟","将","射击","游戏","模式","展现","记录","存在","于","人脑","意识","系","到","反复","准度","未来","内存","攻势","运用","sjtu","本","鼠标","此类","缩短","精英","特点","读取","端","智能","静态","单次","移动","框架","人称","缩小","提供","演示","流程","了","现代","对以","优化","、","时延","灵敏度","一般","技术","瞄准","灵敏","或许","现代化","不"," ","\\","小组","用于","分离","ai001","前端","单独","从","平化","适配","cs","原理","画面","也","改动","的","确定","程序","难以","模拟"],"title":"概要","title_tokens":["概要"]},{"location":"get-start/installation/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["日志","fps","库","仅","启动","设计","2","功能","概要","54","12","实现","前后","go","10","方案","22","架构","13","三方","高","0.3","37","6","5","3","启动器",".","彭梦龙","0.1","后","00","脚本","56","第三",":","11","23","风格","分工","-","ai","7","18","7.13","与","7.14","难点","4","传递","参数","预","51","训练","15","48","问题","时间延迟","时间","14","延迟","偏移","30","1","tkinter","7.12","标准","目录","鼠标","7.15","矩形","朱烨","端","矩形框","python","单次","gui","提供","第三方","人物","老旧","aiming","0.2","附录","19","开发","技术","瞄准","32","0","模型"," ","小组","依赖","前端","cs","08","孙瑜杰","21","的","16","程序"],"title":"目录","title_tokens":["目录"]},{"location":"get-start/installation/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["小组","分工"," "]},{"location":"get-start/installation/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["代码","启动器","迭代","提供","演示","日志","版本","了","参与","后","启动","优化","）","、","脚本","游戏","分辨率","通过","灵敏度","开发","中","文档","灵敏","分辨","得出","模型"," ","实验","（","关系","主体","辨率","负责","敏度","本","最初","前端","真实","鼠标","测试","获取","与","，","端","撰写","窗口","等","参数","的","思路","程序","完成"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"get-start/installation/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["启动器","迭代","提供","演示","信息","了","交互","参与","后","启动","设计","、","客户端","脚本","模式","游戏","通过","灵敏度","开发","中","。","实现","前后","灵敏","go",":","得出"," ","实验","关系","主体","负责","敏度","前端","鼠标","测试","视频","客户","cs","录制","与","，","端","窗口","传递","参数","等","的","思路","程序"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"get-start/installation/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["legends","并","cs1.6","在","流程","可观","了","问题","使用","制作","精度","后","）","、","和","对","最终","不同","游戏","数据","由于","中","打标","实现","文档","流程图","apex","得出","测试程序","模型"," ","ppt","（","速度","上","较","集","本","测试","适配","汇报","选择","，","也","yolov5n","的","思路","程序","训练"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"get-start/installation/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["设置","《","并","主要","性能","库","前台","小窗","启动","反恐精英","对","cd","[","中","audio","位置","go","影响","switch","待","下载","物体","程序开发","三方","测试","运行","若","，","yolov5","若无则","语音","原创","pt","启动器","用户","展示","使用",".","ultralytics","基于","命令","后","过程","和","由","脚本","：","tune","py","。","第三","一步",":","若无","（","》","敏度","-","ai","加速","与","asr","平台","参数","预","训练","代码","全球","识别","有","捕捉","交互","检测","]","）","课程","反恐","射击","游戏","主程序","launcher","模式","文件","计算","攻势","目录","sjtu","torch","鼠标","精英","端","关闭","移动","yolov5n","提供","演示","第三方","人物","进一步","置顶","无","自动","来自","、","灵敏度","_","开发","位于","灵敏","running","调用","模型"," ","组员","\\","api","用于","demo","console","bin","前端","可","cs","directory","画面","命令行","的","程序","模拟"],"title":"程序 架构","title_tokens":["程序"," ","架构"]},{"location":"get-start/installation/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["流程","使用",".","自动","启动","如下","程序运行","：","直接","launcher","py","。","流程图"," ","\\","会","bin","ai","运行","若","，","需","注","关闭","程序"],"title":"功能 实现 与 技术 方案","title_tokens":["功能"," ","与","方案","技术","实现"]},{"location":"get-start/installation/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["设置","并","在","引发","status","库","按钮","启动","设计","保存","ratiobutton","避免","中","实现","为","go","时","麻烦","以上","下载","被","一组","点击","运行","，","弹窗","组件","同时","报错","目标","使用",".","基于","借鉴","后","说明","和","不同","脚本","下次","第一","。","py","pytorch","下","ttkbootstrap",":","except","（","上","较","风格","“","json","敏度","根据","ai","显卡","供","调节","多重","参数","变为","发生","ttk","界面","语句","状态","try","yolov5m","）","游戏","rtx3080","存在","文件","tkinter","会","至","frame","条","每次","行为","鼠标","提示","选择","所有","构建","读取","推荐","执行","端","scale","关闭","yolov5n","...","均","标题","小","改变","提供","各","深层","了","openvino","自动","嵌套","”","灵敏度","_","省去","灵敏","running","一次","不","每"," ","模型","及","\\","用于","demo","bin","前端","第一次","可","如","cs","显示","时会","设备","窗口","也","布局","的"],"title":"前端 启动器","title_tokens":["前端","启动","启动器"," "]},{"location":"get-start/installation/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["并","在","函数","screenindo","加以","status","库","启动","calc","对","分辨率","中","实现","重复","opencv","上述","位置","go","click","原始","速度","置信","获取","高","系统","，","yolov5","keyboard","弹窗","启动器","qimagetocvmat","用户","展示",")","使用",".","目标","补偿","后","选取","下单","通过","置信度","tune","。","下","按","后续","运动","绘制",":","较","json","键时","敏度","根据","采取","事件","相关","截屏","屏幕","与","win32gui","监听","捉到","参数","按下","识别","次","捕捉","模拟","时间","将","模式","游戏","键盘","射击","到","计算","moveto","倍率","(","特殊","截图","信度","hook","两次","函数调用","head","torch","鼠标","定义","实施","定位","读取","捕捉到","移动","格式","流程","人物","了","指定","自动","load","优化","实测","、","最近","灵敏度","_","离","准星","running","灵敏","头部","pydirectinput","调用","分辨"," ","\\","api","辨率","demo","bin","从","前端","传入","cs","hub","窗口","pyqt5","捉","x","的","转换","当","敌方"],"title":"后 端 脚本","title_tokens":["脚本","后","端"," "]},{"location":"get-start/installation/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["难点"," ","技术"]},{"location":"get-start/installation/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["："," ","了","解决","使用","。","实现","库","ttkbootstrap","美化"],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":[" ","标准","风格","python",".","老旧","的","库","1","tkinter","gui","设计"]},{"location":"get-start/installation/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["并","函数","冲突","进程","方式","隐藏","后","循环","、","打开","保存","脚本","：","通过","调用函数","阻塞","文件","。","loop","前后","终端","调用","start"," ","以","分离","pythonw","json","import","前端","独立","完全","多个","调和","与","，","端","执行","解决","传递","关闭","参数","的","难以"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["2"," ","端","问题",".","传递","参数","前后"]},{"location":"get-start/installation/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["并","我们","在","函数","版本","环节","0.4","性能","多种","毫无作用","启动","calc","对","情况","中","核显","最佳","集成","作用","位置","使","速度","最快","耗时","amd","测试","应对","0.06","高","，","紧张","主力","敌人","精准度","5","启动器","用户","方式","0.09",")","目标","和","需要","下单","：","小于","。","下","yolov5s","可以","多次","忽略","（","最早","-","rtx30","显卡","截屏","解决","都","忽略不计","代码","only","迭代","识别","次","精准","几乎","）","0.12","这么","将","延迟","最终","射击","游戏","秒","0.008","最后","系","到","计算","确立","反复","不计","(","6m","准度","截图","至","花费","head","差","鼠标","库函数","保证","选择","端","集成显卡","5800h","种","迁移","单次","移动","yolov5n","gpu","0.005","aim","graphics","了","0.5","0.2","优化","、","cuda","r7","时延","_","cpu","瞄准","pydirectinput","0.02","模型"," ","vega","部分","从","独显","进行","毫无","作为","多个","约","pyqt5","改动","的","研究","rtx3070","模拟"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["延迟","高"," ",".","瞄准","单次","时间延迟","时间","3"]},{"location":"get-start/installation/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["并","十分","提供","识别","函数","人物","可观","了","精确","性能","使用","实际","仅","设计","实时","和","自行","最终","：","游戏","通过","大致","射击","考虑","自行设计","情况","瞄准","到","下","计算","。","精确度","头部","位置","影响","模型"," ","时","速度","调整","根据","矩形","运行","，","矩形框","需求","解决","的","确定"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":["模型"," ","矩形","提供","人物","矩形框","4",".","预","仅","训练"]},{"location":"get-start/installation/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["20","定性","并","我们","在","变换","其","同时","了","接受","回归","选项","连接","后","得到","、","自行","和","最终","：","游戏","记录","偏移","灵敏度","”","全","中","。","pytorch","反复","倍率","灵敏","出现","go",":","导致","模型"," ","原始","组","“","单层","关系","敏度","内","鼠标","进行","测试","有关","cs","加速","约","，","与","基本","解决","输入","搭建","关闭","参数","移动","确定","过大时"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":[":","cs"," ","偏移","问题",".","鼠标","5","go"]},{"location":"get-start/installation/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":["开发","日志"," "]},{"location":"get-start/installation/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["前端","启动","启动器"," "]},{"location":"get-start/installation/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["启动器","改变","用户","在","进一步","了","使用","后","启动","优化","）","将","2","游戏","通过","下次","切换","一步","可以","生效","修复"," ","时","快捷","不","（","待","内","测试","体验","快捷键","/","显示","bug","运行","提示","，","若","端","语音","弹窗","无需","改动","参数","关闭","个"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["7",":","10"," ","08","0.3",".","6","16","-"]},{"location":"get-start/installation/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["用户","调节器","在","精准","游戏","保持一致","灵敏度","灵敏","准度","go",":"," ","时","提高","敏度","内","鼠标","一致","cs","显示","选择","，","与","调节","保持","的","精准度"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":["7",":"," ","19","0.3","14","54",".","5","-"]},{"location":"get-start/installation/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["设置"," ","提示","用户","，","方式","使用","弹窗","优化","指引","体验"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["7",":"," ","0.3","14","37",".","15","3","-"]},{"location":"get-start/installation/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["会议",">","启动器","不再","同时","类似","选项","隐藏","之后","按钮","藏式","后","启动","线程","）","设计","数传","脚本","模式","避免","参数传递","增加","阻塞","改为","。","动态","结束","start"," ","（","会","json","端的","pythonw","前端","腾讯","隐藏式","-","运行","beta","与","，","端","新","python","窗口","也","传递","关闭","参数","程序","变为","完成"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":["7",":"," ","30","0.3",".","1","14","-"]},{"location":"get-start/installation/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["重构","界面","方式","使用","现代","启动","）","、","扁平","游戏","normal","增加","扁平化","。","或","ttkbootstrap","现代化","模型"," ","及","（","demo","平化","提示","选择","，"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["7","0",":"," ","0.3","22",".","51","13","-"]},{"location":"get-start/installation/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["启动器"," ","开发","使用","前端","tkinter","启动","完成"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":["7","0","11",":"," ","23",".","0.2","13","-"]},{"location":"get-start/installation/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["脚本","后","端"," "]},{"location":"get-start/installation/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["时延","模式","修复"," ","bug","演示","，","流程","了","算法","动态","补偿","减少","的","1","优化","个"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["7.15",":"," ","19","0.3",".","32","3","-"]},{"location":"get-start/installation/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["用户","精准","灵敏度","算法","灵敏","准度","go",":"," ","提高","调整","敏度","鼠标","根据","适配","cs","，","输入","移动","的","精准度"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":["2",":","23","11"," ","7.14","0.3",".","-"]},{"location":"get-start/installation/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["并","演示","展示","识别","回","实时","数传","模式","的","参数传递","。","标框","截图","改"," ","json","前端","，","全屏","与","新","传递","参数","范围","完成"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["00","18",":"," ","7.14","0.3",".","1","-"]},{"location":"get-start/installation/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["非","敌人","识别","了","问题","匀速","补偿","分辨率","动态","实现","算法","运动","分辨","修复"," ","匀速运动","初步","辨率","真实","有效","屏幕","，","对近","的"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":["00","0",":"," ","7.14","56","0.3",".","-"]},{"location":"get-start/installation/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["降低","进一步","了","目标","方式","优化","将","cuda","由","时延","最近","离","改为","一步","最佳","准星","模型"," ","至","最大","选择","，","迁移","的"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":["7.13","0",":"," ",".","12","0.2","32","-"]},{"location":"get-start/installation/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["降低","流程","函数","识别","展示","秒左右","置顶","使用","中心","0.2","小窗","过程","、","延迟","简洁","。","瞄准","反应速度","为","左右","opencv","位置","截图","模型"," ","速度","api","高手","改进","反应","修改","鼠标","持平","屏幕","，","与","单次","移动","的"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":[":"," ",".","21","0.1","48","5","7.12","-"]},{"location":"get-start/installation/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["延迟","近"," ","秒","，","版本","0.4","瞄准","单次","0.5","初代","-"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["0","11",":"," ",".","0.1","14","7.12","-"]},{"location":"get-start/installation/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"get-start/installation/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["os","sys",")",".","numpy","qtwidgets","pytorch","opencv","(","tkinter","ttkbootstrap","qtgui","pydirectinput","cv2"," ","json","torch","-","pytest","win32gui","time","pickle","python","keyboard","pyqt5"],"title":"第三方 依赖 库","title_tokens":[" ","第三方","依赖","第三","库","三方"]},{"location":"get-start/question/","text":"","text_tokens":[],"title":"遇到 问题","title_tokens":[" ","遇到","问题"]},{"location":"get-start/set-driver/","text":"","text_tokens":[],"title":"配置 驱动器","title_tokens":["配置","驱动"," ","驱动器"]},{"location":"get-start/set-sql/","text":"","text_tokens":[],"title":"配置   SQL","title_tokens":["配置","sql"," "]},{"location":"plugin/introduction/","text":"","text_tokens":[],"title":"插件 入门","title_tokens":["插件"," ","入门"]},{"location":"plugin/plugins-group/","text":"","text_tokens":[],"title":"插件 组","title_tokens":["插件","组"," "]},{"location":"plugin/standard-plugin/","text":"","text_tokens":[],"title":"标准 插件","title_tokens":[" ","插件","标准"]}]}