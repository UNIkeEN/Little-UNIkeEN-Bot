{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"version   1.0 . 0   简介   Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["可"," ","聊天","机器人","、","little","由","轻量级","量级","简介","version","机器","是","一个","扩展","0","框架","1.0","多","unikeen","bot","轻量",".","-","平台","的","编写","python"],"title":"Index","title_tokens":["index"]},{"location":"#_1","text":"Little - UNIkeEN - Bot   是 一个 由   Python   编写 的 轻量 量级 轻量级 、 多 平台 、 可 扩展 的 聊天 机器 机器人 框架","text_tokens":["可"," ","聊天","机器人","、","little","由","轻量级","量级","机器","是","一个","扩展","框架","多","unikeen","bot","轻量","-","平台","的","编写","python"],"title":"简介","title_tokens":["简介"]},{"location":"license/","text":"MIT 许可   Copyright   ( C )   2022   UNIkeEN   Permission   is   hereby   granted ,   free   of   charge ,   to   any   person   obtaining   a   copy   of   this   software   and   associated   documentation   files   ( the   \" Software \" ) ,   to   deal   in   the   Software   without   restriction ,   including   without   limitation   the   rights   to   use ,   copy ,   modify ,   merge ,   publish ,   distribute ,   sublicense ,   and / or   sell   copies   of   the   Software ,   and   to   permit   persons   to   whom   the   Software   is   furnished   to   do   so ,   subject   to   the   following   conditions :   The   above   copyright   notice   and   this   permission   notice   shall   be   included   in   all   copies   or   substantial   portions   of   the   Software .   THE   SOFTWARE   IS   PROVIDED   \" AS   IS \" ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR   IMPLIED ,   INCLUDING   BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY ,   FITNESS   FOR   A   PARTICULAR   PURPOSE   AND   NONINFRINGEMENT .   IN   NO   EVENT   SHALL   THE   AUTHORS   OR   COPYRIGHT   HOLDERS   BE   LIABLE   FOR   ANY   CLAIM ,   DAMAGES   OR   OTHER   LIABILITY ,   WHETHER   IN   AN   ACTION   OF   CONTRACT ,   TORT   OR   OTHERWISE ,   ARISING   FROM ,   OUT   OF   OR   IN   CONNECTION   WITH   THE   SOFTWARE   OR   THE   USE   OR   OTHER   DEALINGS   IN   THE   SOFTWARE .","text_tokens":["otherwise","arising","modify","restriction","person","this","software","2022","furnished","implied","be","warranty","deal","permission","following","copies","persons","whom","shall","any","and","provided","c",":","for","including","event","distribute","authors","mit","not","dealings","publish","hereby","in","from","holders","connection","other","substantial","express","of","action","subject","\"","documentation","liability","included","associated",")","rights","with","kind","warranties","conditions",".","liable","a","portions","whether",",","sell","all","limitation","contract","an","without","许可","use","tort","damages","to","sublicense","claim","so","fitness","copyright","unikeen","limited","charge","out","above","(","do","permit","obtaining","merchantability"," ","or","free","particular","the","files","/","as","granted","but","notice","copy","is","merge","no","noninfringement","purpose"],"title":"授权 许可","title_tokens":["授权","许可"," "]},{"location":"get_start/AI001/","text":"FPS - AI - Aiming   组员 ： 孙瑜杰 、 朱烨 、 彭梦龙   概要   本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。   目录   FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库   小组 分工   孙瑜杰   主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）   朱烨   主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频   彭梦龙   打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图   程序 架构   程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）   功能 实现 与 技术 方案   程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。   前端 启动 启动器   前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。   后 端 脚本   从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   解决 ： 使用   ttkbootstrap   库 实现 了 美化 。   2 . 前后 端 传递 参数 问题   通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。   3 . 单次 瞄准 时间 延迟 时间延迟 高   最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观   5 . CS : GO 鼠标 偏移 问题   CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）   0.3 . 5   -   7 - 14 - 19 : 54   在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度   0.3 . 3   -   7 - 14 - 15 : 37   优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式   0.3 . 1   -   7 - 14 - 14 : 30   完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）   0.3 . 0   -   7 - 13 - 22 : 51   使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）   0.2 . 0   -   7 - 13 - 11 : 23   使用   tkinter   完成 前端 启动 启动器 开发   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延   0.3 . 2   -   7.14 - 23 : 11   适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度   0.3 . 1   -   7.14 - 18 : 00   新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递   0.3 . 0   -   7.14 - 00 : 56   修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效   0.2 . 0   -   7.13 - 12 : 32   将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标   0.1 . 5   -   7.12 - 21 : 48   改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程   0.1 . 0   -   7.12 - 11 : 14   初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒   附录   第三 三方 第三方 依赖 库   os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":["执行","下单","中","独立","一步","32","组员","5","公司","原理","连接","传递","保持一致","人工智能","应对","保持","时有","搭建","演示","参数",":","切换","）","时间","多款","json","0.008","录制","设置","进行","进一步","报错","调整","前台","多次","按","关闭","置信度","嵌套","循环","0.12","0.5","避免","确立","pyqt5","预","全球","选项","一次","点击","视频","当","引发","cv","反作弊","布局","hub","训练","防不胜防","键时","概要","初代","fps","回归","ai001","弹窗","人工","截屏","命令行","51","及","后","单层","bug","合适","0.005","捉","《","近","置信","实验","ttk","标框","约","忽略不计","每","yolov5","x","第一次","56","openvino","最初","语音","cd","环节","仅","迁移","08","30","线程","三方","依赖","“","14","不胜","ratiobutton","import","精准","最后","共享","花费","捉到","11","基于","架构","举报","加以","主要","从","网络","由于","：","3","难以","对以","孙瑜杰","apex","若无则","平化","pytorch","运用","真实","时会","进程","/","数据","作业","小组","audio","重复","但","需要","aiming","15","解决","辨率","几乎","37","精度","s","修复","端","主力","[","现代化","制作","多个","都","2","导致","作为","平台","最终","未来","冲突","迭代","running","指引","qtgui","所有","位置","程序","有","问题","次","情况","集成","存在","现代","左右","不同","较","保存","frame","准星","部分","ultralytics","功能","按下","攻势","于","only","优化","一组","而是","​","目录","00","实施","回","智能","pydirectinput","7.13","缩小","head","最早","验证","或","增加","脚本","使","（","自行设计","矩形","模拟","倍率","实现","战场","0.02","不","附录","构建","小","打标","4","非","若","amd","界面",")","分辨","load","单独","物体","原创","组","48","保证","定义","来自","撰写","keyboard","老旧","原始","status","ttkbootstrap","端的","交互","个","将","思路","库","记录","由","瞄准","时间延迟","之后","神经网","tkinter","十分","考虑","秒左右","过大时","关系","均","下载","实际","算法","同时","leq","legends","使用","如下","影响","神经网络","行为","作用","基本","新","7.15","接受","传统","缩短","减少","pythonw","库函数","\\","ui","，","程序开发","相同","完成","新型","go","和","设备","灵敏","实时","后续","通过","提示","流程","匀速运动","normal","毫无","1","分工","结合","省去","aim","到","差异","。","辅助","集成显卡","有关","改","监听","读取","0.1","补偿","精准度","研究","不计","hook","适配","打开","识别","21","速度","第三","设计","阻塞","矩形框","了","等","特殊","ai","0","23","pytest","说明","目标","反恐","最快","方式","如","改动","asr","推荐","全","持平","捕捉到","窗口","以上","0.09","最佳","根据","文件","难点","隐藏","、","qimagetocvmat","计算","except","rtx3070","直接","]","本次","客户端","至","反恐精英","朱烨","一般","指定","cpu","输入","反应速度","最近","时延","第一","上述","对近","运动","方案","54","api","小窗","大致","捕捉","变换","yolov5n","scale","分析","耗时","人称","文档","需","截图","选取","screenindo","尽量","调节器","不再","忽略","rtx3080","可","start","我们","美化","仅供","beta","rtx30","cs1.6","本","条","0.06","cv2","》","moveto","pt","反应","10","这么","出","射击","调节","torch","22","自行","采取","静态","定性","按钮","扁平化","20","意识","隐藏式","测试程序","的",">","作弊","类似","python","cuda","以","对","tune","与","自动","或许","彭梦龙","确定","准度","参与","信度","初步","启动","敌人","需求","其","有效","腾讯","性能","无","为","版本","流程图","系统","汇报","graphics","5800h","灵敏度","敌方","深刻","一致","改变","_","内存","精确度","...","降低","0.3","-","19","结束","cs","opencv","键盘","离","主体","第一人称","模式","经过","此类","得出","相关","状态","显示","gpu","核显","0.4","提供","重构","switch","分辨率","console","格式","体验","简洁","敏度","数传","集","高","启动器","待","launcher","且","sys","普通","”","生效","time","语句","延迟","最大","反复","快捷","画面","16","0.2","用于","人物","directory","范围","改进","calc","下","pickle","加速","游戏","可以","小于","高手","也","系","藏式","os","提高","yolov5m","函数调用","分离","测试","偏移","用户","注","框架","调用函数","扁平","显卡","r7","gui","win32gui","被","单次","供","前后","检测",".","紧张","命令","7","客户","展现","vega","内","精英","特点","差","7.12","loop","每次","技术","调用","定位","实测","出现","12","在","获取","前端","调和","匀速","无需","过程","会议","上","两次","展示","各","18","传入","人脑","6m","ppt","动态","置顶","头部","并","6","完全","函数","快捷键","屏幕","借鉴","精确","课程","$","位于","sjtu","click","主程序","事件","移动","麻烦","numpy","中心","(","选择","日志","毫无作用","神经","终端","try","模型"," ","标题","yolov5s","运行","程序运行","全屏","修改","参数传递","这一","绘制","转换","秒","得到","种","风格","py","qtwidgets","7.14","会","13","可观","独显","第三方","负责","代码","信息","组件","若无","多重","鼠标","多种","标准","开发","深层","demo","下次","时","变为","改为","bin","发生"],"title":"AI001","title_tokens":["ai001"]},{"location":"get_start/AI001/#fps-ai-aiming","text":"组员 ： 孙瑜杰 、 朱烨 、 彭梦龙","text_tokens":["孙瑜杰"," ","：","、","彭梦龙","朱烨","组员"],"title":"FPS - AI - Aiming","title_tokens":["-"," ","ai","fps","aiming"]},{"location":"get_start/AI001/#_1","text":"本 程序 为 SJTU   AI001 课程 小组 作业 ， 仅供 技术 验证 ， 不 用于 实际 游戏 作弊   ​   本 程序 基于 pytorch 框架 与 yolov5 物体 检测 平台 ， 实现 了 人工 智能 人工智能 对 FPS （ 第一 人称 第一人称 射击 ） 游戏 的 辅助 瞄准 。 与 传统 游戏 作弊 方式 不同 ， 本 程序 不 读取 或 改动 游戏 的 内存 数据 ， 而是 通过 人工 智能 人工智能 实时 分析 游戏 画面 、 确定 敌人 位置 并 移动 鼠标 射击 ， 反应 流程 与 人脑 相同 ， 难以 被 普通 作弊 反作弊 方式 检测 。 本 程序 的 特点 有 ：   单次 识别 过程 经过 反复 优化 ， 在 RTX30 系 显卡 下单 次 时延 $ \\ leq   0.1 s $ ​   前后 端 分离 ， 前端 启动 启动器 UI 界面 现代 现代化 、 扁平 平化 扁平化 ， 提供 参数 调节 功能 并 与 后 端 通过 json 参数 共享   设计 演示 模式 ， 实时 展现 AI 的 识别 过程   设计 静态 和 动态 模式 ， 在 敌人 静态 和 近 匀速 运动 匀速运动 时有 可观 的 射击 精准 准度 精准度   适配 多款 射击 游戏 ， 对 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 单独 优化 ， 考虑 到 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   ​   从 本次 技术 验证 中 ， 我们 深刻 意识 到 游戏 公司 对以 人工 智能 人工智能 CV 识别 为 原理 的 新型 游戏 作弊 方式 不胜 防不胜防 ， 但 AI 为 缩小 延迟 ， 一般 将 移动 鼠标 的 过程 尽量 缩短 ， 且 模拟 鼠标 移动 方式 与 人工 存在 差异 。 通过 实时 记录 鼠标 移动 、 结合 用户 举报 ， 未来 或许 可以 训练 出 合适 的 神经 网络 神经网 神经网络 检测 这一 新型 游戏 作弊 方式 。 同时 ， 我们 也 意识 到 此类 技术 或许 可以 运用 于 未来 战场 。","text_tokens":["读取","此类","0.1","下单","中","精准度","有","次","存在","现代","适配","提供","识别","公司","原理","不同","人工智能","设计","敏度","了","时有","ai","启动器","且","功能","攻势","演示","于","优化","参数","普通",":","而是","​","）","反恐","延迟","智能","反复","模式","缩小","多款","画面","json","方式","验证","用于","改动","设置","或","加速","（","游戏","可以","也","系","、","模拟","实现","战场","不","分离","全球","本次","用户","反恐精英","框架","一般","界面","扁平","显卡","时延","被","cv","反作弊","防不胜防","第一","单次","物体","运动","单独","训练","前后","fps","检测","ai001","人工","分析","人称","展现","精英","后","特点","合适","尽量","技术","《","近","将","在","记录","我们","前端","仅供","yolov5","匀速","瞄准","rtx30","本","神经网","过程","》","考虑","反应","人脑","出","射击","动态","并","实际","不胜","同时","leq","调节","精准","共享","影响","课程","$","神经网络","sjtu","基于","静态","移动","举报","扁平化","意识","传统","从","缩短","网络","：","的","难以","作弊","神经","对","与","对以","\\"," ","ui","或许","平化","，","pytorch","运用","确定","准度","启动","敌人","数据","作业","为","相同","小组","新型","go","这一","但","和","灵敏","灵敏度","实时","深刻","s","通过","端","流程","匀速运动","现代化","结合","内存","可观","鼠标","到","差异","。","平台","辅助","cs","未来","第一人称","位置","程序","经过"],"title":"概要","title_tokens":["概要"]},{"location":"get_start/AI001/#_2","text":"FPS - AI - Aiming   概要   目录   小组 分工   孙瑜杰   朱烨   彭梦龙   程序 架构   功能 实现 与 技术 方案   前端 启动 启动器   后 端 脚本   技术 难点   1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧   2 . 前后 端 传递 参数 问题   3 . 单次 瞄准 时间 延迟 时间延迟 高   4 . 预 训练 模型 仅 提供 人物 矩形 矩形框   5 . CS : GO 鼠标 偏移 问题   开发 日志   前端 启动 启动器   0.3 . 6   -   7 - 16 - 10 : 08   0.3 . 5   -   7 - 14 - 19 : 54   0.3 . 3   -   7 - 14 - 15 : 37   0.3 . 1   -   7 - 14 - 14 : 30   0.3 . 0   -   7 - 13 - 22 : 51   0.2 . 0   -   7 - 13 - 11 : 23   后 端 脚本   0.3 . 3   -   7.15 - 19 : 32   0.3 . 2   -   7.14 - 23 : 11   0.3 . 1   -   7.14 - 18 : 00   0.3 . 0   -   7.14 - 00 : 56   0.2 . 0   -   7.13 - 12 : 32   0.1 . 5   -   7.12 - 21 : 48   0.1 . 0   -   7.12 - 11 : 14   附录   第三 三方 第三方 依赖 库","text_tokens":["0.1","问题","32","提供","21","5","传递","第三","设计","矩形框","ai","高","启动器","0","功能","23","参数",":","目录","00","延迟","7.13","时间","0.2","16","人物","脚本","难点","矩形","实现","附录","预","4","偏移","朱烨","gui","训练","单次","概要","前后","fps","48",".","方案","54","7","老旧","51","后","7.12","技术","12","库","前端","瞄准","时间延迟","tkinter","56","10","仅","08","18","30","三方","依赖","6","14","22","11","架构","7.15","的","日志","3","python","与","孙瑜杰"," ","模型","彭梦龙","启动","小组","go","aiming","15","37","端","风格","7.14","1","分工","13","第三方","2","0.3","鼠标","-","19","标准","cs","开发","程序"],"title":"目录","title_tokens":["目录"]},{"location":"get_start/AI001/#_3","text":"","text_tokens":[],"title":"小组 分工","title_tokens":["小组","分工"," "]},{"location":"get_start/AI001/#_4","text":"主体 负责 前端 启动 启动器 的 开发 、 测试 与 迭代   参与 了 后 端 脚本 的 开发 、 测试 与 迭代 ， 完成 了 最初 版本 的 演示 窗口 代码 ， 提供 模型 优化 、 获取 真实 分辨 辨率 分辨率 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   撰写 了 开发 日志 （ 本 文档 ）","text_tokens":["得出","窗口","中","（","与","游戏","模型"," ","实验","思路","获取","，","、","日志","参与","前端","提供","启动","真实","分辨率","本","测试","完成","版本","敏度","了","等","最初","启动器","关系","灵敏","辨率","灵敏度","演示","优化","分辨","通过","端","参数","）","负责","代码","鼠标","撰写","文档","开发","迭代","的","后","脚本","主体","程序"],"title":"孙瑜杰","title_tokens":["孙瑜杰"]},{"location":"get_start/AI001/#_5","text":"主体 负责 后 端 脚本 、 演示 模式 窗口 开发 、 测试 与 迭代 。 实现 后端 与 CS : GO 游戏 客户 客户端 的 交互   参与 了 前端 启动 启动器 的 开发 、 测试 与 迭代 ， 提供 了 参数 设计 、 前后 端 信息 传递 等 思路   通过 实验 得出 游戏 中 鼠标 灵敏 敏度 灵敏度 与 程序 参数 的 关系   录制 了 演示 视频","text_tokens":["得出","窗口","交互","中","与","游戏"," ","实验","思路","，","、","参与","前端","提供","实现","启动","传递","测试","设计","敏度","客户端","了","go","等","启动器","视频","关系","灵敏","灵敏度","演示","通过","参数","端",":","前后","信息","负责","鼠标","客户","。","开发","cs","录制","迭代","的","后","脚本","主体","模式","程序"],"title":"朱烨","title_tokens":["朱烨"]},{"location":"get_start/AI001/#_6","text":"打标 制作 训练 数据 集 （ 由于 训练 后 模型 的 速度 和 精度 问题 最终 选择 使用   yolov5n   ）   在 Apex   Legends 和 CS1.6 游戏 上 测试 程序 测试程序 并 得出 了 对 不同 游戏 适配 的 思路 ， 在 CS1.6 和 Apex 上 也 实现 了 较 可观 的 精度   制作 了 汇报 PPT 、 本 文档 中 的 流程 流程图","text_tokens":["得出","对","中","（","游戏","问题","模型"," ","apex","思路","也","在","，","、","适配","速度","实现","cs1.6","不同","本","测试","数据","较","流程图","打标","上","了","汇报","集","和","精度","ppt","并","流程","训练","legends","使用","）","可观","制作","yolov5n","文档","选择","最终","由于","测试程序","的","后","程序"],"title":"彭梦龙","title_tokens":["彭梦龙"]},{"location":"get_start/AI001/#_7","text":"程序 中 由 组员 原创 的 主要 代码 文件 有 ：   launcher . py   前端 启动 启动器 ， 与 用户 提供 交互 。 用户 可 设置 启动 参数 并 运行   \\ bin \\ ai . py   后 端 程序 主程序 ， 捕捉 游戏 画面 、 调用 API 识别 人物 、 计算 射击 位置 并 模拟 移动 鼠标   \\ bin \\ demo . py   演示 模式 前台 置顶 小窗 ， 展示 识别 过程   \\ bin \\ asr _ switch . py   用于 语音 识别 关闭 后 端 （ 待 一步 进一步 测试 ）   程序 开发 程序开发 过程 中 用于 测试 性能 和 参数 的 代码 文件 有 ：   \\ bin \\ tune . py   用于 测试 CS : GO （ 《 反恐 精英 反恐精英 : 全球 攻势 》 ） 鼠标 加速 与 鼠标 灵敏 敏度 灵敏度 设置 对 程序 参数 的 影响   使用 的 第三 三方 第三方 模型 平台 有 ：   \\ bin \\ ultralytics \\ yolov5 \\   调用 的 物体 检测 平台 ， 基于 torch   [ Console - Running - Directory ] \\ yolov5n . pt   预 训练 模型 位于 运行 脚本 的 命令 命令行 cd 目录 （ 若无 若无则 自动 下载 ）   \\ bin \\ audio . py   课程 提供 库 （ 来自   sjtu . audio   ）","text_tokens":["中","有","一步","提供","识别","组员","switch","console","第三","敏度","ai","启动器","待","launcher","ultralytics","攻势","演示","参数",":","目录","）","反恐","画面","用于","asr","设置","人物","directory","进一步","脚本","前台","关闭","位置","加速","（","游戏","文件","、","模拟","计算","预","测试","全球","]","用户","若","反恐精英","训练","物体","原创","检测",".","api","小窗","命令","捕捉","yolov5n","来自","命令行","精英","后","交互","《","调用","可","库","由","前端","yolov5","过程","》","pt","语音","cd","展示","三方","射击","置顶","程序","下载","并","使用","影响","torch","位于","课程","sjtu","主程序","基于","移动","主要","：","的","tune","对","与","\\","模型"," ","若无则","自动","，","启动","程序开发","运行","性能","无","audio","go","和","灵敏","灵敏度","端","py","[","_","第三方","代码","若无","鼠标","-","。","开发","cs","平台","demo","running","模式","bin"],"title":"程序 架构","title_tokens":["架构"," ","程序"]},{"location":"get_start/AI001/#_8","text":"程序 运行 程序运行 流程 流程图 如下 ：   注 ： 需 使用   launcher . py   启动 程序 ， 若 直接 启动   \\ bin \\ ai . py   会 自动 关闭 。","text_tokens":["关闭","\\"," ","自动","，","启动","运行","程序运行","流程图","直接","ai","注","launcher","程序","流程","py","会","如下","使用",".","需","。","：","bin","若"],"title":"功能 实现 与 技术 方案","title_tokens":["功能","技术","与"," ","方案","实现"]},{"location":"get_start/AI001/#_9","text":"前端 界面 中 的 各 组件 使用 均 基于   tkinter   的   ttkbootstrap   库 构建 。   每 行为 一组 参数 的 选择 ， 设计 上 借鉴 了 pytorch 和 openVINO 下载 界面 的 风格 ， 布局 上 使用 多重   ttk . Frame   嵌套   ttk . RatioButton   实现 。 同时 ， 根据 不同 的 参数 选择 会 提供 不同 的 提示 （ 如 模型 选择 较 小 的   yolov5n   ， 显示 “ 所有 设备 均 推荐 使用 ” ， 选择 较 深层 的   yolov5m   ， 显示 “ 推荐 在 RTX3080 及 以上 显卡 使用 ） 。   选择 目标 游戏 为 CS : GO 时会 显示 鼠标 灵敏 敏度 灵敏度 的 调节 条 （ 使用   ttk . Scale   实现 ） ， 运行 后 参数 被 保存 至   \\ \\ bin \\ running _ status . json   中 ， 可 供 下次 启动 时 自动 读取 ， 省去 了 每次 设置 的 麻烦 。 同时 使用   try ... except   语句 避免 第一 一次 第一次 运行 json 文件 不 存在 引发 报错 。   点击 运行 按钮 后 ， 弹窗 提示 使用 说明 。 并 根据 参数 执行   \\ bin \\ ai . py   和   \\ bin \\ demo . py   ， 运行 按钮 同时 变为 关闭 按钮 ， 用于 关闭 后 端 脚本 。 运行 状态 下 ， 窗口 标题 也 发生 改变 。","text_tokens":["读取","执行","中","状态","显示","存在","提供","不同","设计","较","敏度","保存","frame","了","ai","参数","说明","目标","一组",":","”","）","语句","json","如","用于","设置","推荐","报错","脚本","下","关闭","窗口","以上","（","嵌套","游戏","根据","文件","也","避免","except","实现","yolov5m","构建","不","小","至","一次","点击","界面","显卡","引发","被","布局","第一","供",".","弹窗","yolov5n","scale","及","status","后","ttkbootstrap","每次","rtx3080","可","库","ttk","在","每","前端","tkinter","条","第一次","上","openvino","各","均","下载","“","并","ratiobutton","借鉴","同时","使用","调节","变为","行为","基于","麻烦","按钮","选择","的","try","\\","模型"," ","自动","，","pytorch","启动","时会","标题","运行","为","go","和","设备","灵敏","灵敏度","改变","提示","端","风格","py","会","_","省去","组件","...","多重","鼠标","。","cs","深层","下次","running","时","demo","所有","bin","发生"],"title":"前端 启动器","title_tokens":["启动","前端","启动器"," "]},{"location":"get_start/AI001/#_10","text":"从   \\ \\ bin \\ running _ status . json   读取 启动 启动器 中 用户 定义 的 参数   使用   win32gui   、   screenindo   、   PyQt5   库 实现 自动 获取 系统 原始 分辨 辨率 分辨率 与 对 指定 游戏 窗口 的 截屏 ， 并 定义 了   QImageToCvMat ( )   函数 将 捕捉 捉到 捕捉到 的 屏幕 截图 转换 格式 。 在   demo   模式 下 使用   opencv   库 相关 函数 绘制 人物 位置 、 头部 位置 并 弹窗 展示 。   使用   keyboard   库 的   keyboard . hook ( )   函数 对 键盘 事件 实施 监听 ， 当 用户 按下   x   键时 启动 后续 流程   通过   torch . hub . load ( )   函数 调用 函数调用   yolov5   库 的 API 捕捉 人物 位置 ， 选取 置信 信度 置信度 较 高 、 离 准星 最近 的 识别 目标 ， 通过   calc _ head ( )   计算 头部 位置 。 运动 模式 下单 次 按 下   x   重复 上述 流程 两次 ， 计算 敌方 运动 速度 、 根据 实测 的 识别 时间 加以 运动 补偿 。   定位 到 射击 位置 后 使用   pydirectinput . moveTo ( )   与   pydirectinput . click ( )   函数 移动 鼠标 并 模拟 射击 。 对 CS : GO 采取 特殊 优化 ， 通过 前端 传入 的 鼠标 灵敏 敏度 灵敏度 计算 移动 速度 的 倍率   tune","text_tokens":["读取","补偿","中","下单","相关","次","hook","识别","速度","分辨率","格式","较","敏度","了","特殊","准星","高","启动器","按下","优化","参数","目标",":","实施","pydirectinput","模式","时间","json","head","人物","calc","bin","按","下","捕捉到","窗口","置信度","游戏","根据","、","qimagetocvmat","模拟","倍率","计算","实现","pyqt5","函数调用","用户","指定","当","最近",")","win32gui","分辨","hub","键时","load","上述","运动",".","弹窗","api","定义","捕捉","截屏","keyboard","原始","截图","status","后","选取","screenindo","捉","调用","将","定位","置信","实测","获取","库","在","前端","yolov5","x","moveto","两次","展示","传入","射击","头部","并","函数","屏幕","使用","torch","捉到","click","采取","事件","移动","加以","(","从","的","对","tune","与","\\"," ","自动","，","信度","启动","系统","重复","go","绘制","灵敏","辨率","敌方","灵敏度","转换","后续","通过","流程","_","到","鼠标","。","cs","opencv","demo","running","键盘","离","位置","监听"],"title":"后 端 脚本","title_tokens":["脚本","端"," ","后"]},{"location":"get_start/AI001/#_11","text":"","text_tokens":[],"title":"技术 难点","title_tokens":["难点"," ","技术"]},{"location":"get_start/AI001/#1pythontkintergui","text":"解决 ： 使用   ttkbootstrap   库 实现 了 美化 。","text_tokens":["解决"," ","。","了","库","：","使用","美化","ttkbootstrap","实现"],"title":"1 . Python 的 tkinter 标准 GUI 库 设计 风格 老旧","title_tokens":["tkinter","gui","设计","老旧"," ","风格","标准","库","1","的",".","python"]},{"location":"get_start/AI001/#2","text":"通过   import   调用 函数 调用函数 的 方式 难以 调和 前后 端 多个 循环 执行 的   loop   冲突 与 阻塞   解决 ：   前后 端 完全 分离   ， 前端 通过   start   pythonw   以 独立 进程 、 隐藏 终端 的 方式 打开 后 端 脚本 ， 通过 json 文件 传递 、 保存 参数 并 关闭 后 端 脚本 。","text_tokens":["loop","关闭","执行","pythonw","独立","终端","与","调用","循环","文件"," ","隐藏","，","start","、","打开","前端","调和","进程","传递","分离","阻塞","保存","调用函数","解决","通过","完全","端","参数","并","函数","import","前后","多个","json","方式","。","冲突","：","的","后","脚本","难以","以"],"title":"2 . 前后 端 传递 参数 问题","title_tokens":["2","传递","参数","端","问题"," ","前后","."]},{"location":"get_start/AI001/#3","text":"最早 版本 的 单次 瞄准 需要 花费 0.4 - 0.5 秒 ， 这么 高 的 延迟 在 紧张 的 射击 游戏 中 毫无 作用 毫无作用 ， 应对 移动 敌人 精准 准度 精准度 差 。 最后 我们 将 速度 优化 至 在 RTX30 系 显卡 （ RTX3070   6M ） 下单 次 时延 约 0.09 秒 ， 在 集成 显卡 集成显卡 （ AMD   R7 - 5800H   移动 端 Vega   Graphics ） 下单 次 时延 小于 0.2 秒 ）   解决 ： 我们 对 从 截图 、 识别 到 模拟 鼠标 移动 的   多个 环节 都 进行 了 反复 的 迭代 优化   测试 5 种 截图 方式 ， 最终 选择 了 最快 的   PyQt5   函数 库函数 ， 截屏 部分 最终 耗时 小于 0.02 秒 。   测试 多种 模型 ， 最终 选择   yolov5n   和   yolov5s   模型 作为 主力 （ 用户 可以 在 启动 启动器 选择 ） ， 并 将 模型 从   cpu - only   迁移 至   cuda   （ GPU ） ， 识别 模型 部分 最终 耗时 小于 0.06 秒 （   yolov5n   ， 独显 ） 、 0.12 秒 （   yolov5n   ， 核显 ）   研究   pydirectinput   的 函数 库函数 代码 ， 保证 性能 的 情况 下 进行 改动 ， 使 鼠标 移动 部分 耗时 小于 0.005 秒 ， 几乎 忽略 不计 忽略不计 。   多次 优化 了 计算 最佳 射击 位置 的 函数   aim ( )   和   calc _ head ( )   ， 确立 目标 部分 耗时 最终 小于 0.008 秒 ， 几乎 忽略 不计 忽略不计 。","text_tokens":["中","下单","精准度","研究","次","情况","集成","不计","gpu","核显","0.4","识别","速度","5","应对","了","高","启动器","部分","only","优化","目标","）","延迟","pydirectinput","反复","最快","0.2","最早","方式","改动","head","0.008","进行","calc","多次","下","使","（","游戏","0.09","小于","可以","最佳","0.12","0.5","系","、","模拟","计算","rtx3070","0.02","确立","pyqt5","测试","至","用户","amd","cpu","显卡","r7",")","时延","单次","紧张","保证","yolov5n","截屏","耗时","vega","截图","0.005","差","将","忽略","在","约","我们","忽略不计","瞄准","rtx30","0.06","环节","这么","迁移","6m","射击","并","函数","精准","最后","花费","作用","移动","(","从","选择","：","的","cuda","毫无作用","对","库函数","模型"," ","，","准度","启动","敌人","yolov5s","性能","版本","需要","和","graphics","5800h","解决","几乎","秒","端","主力","种","毫无","_","独显","多个","都","代码","aim","到","-","鼠标","作为","多种","。","最终","集成显卡","迭代","位置"],"title":"3 . 单次 瞄准 时间延迟 高","title_tokens":["瞄准","时间延迟","时间"," ","单次","高","3","延迟","."]},{"location":"get_start/AI001/#4","text":"考虑 到 实时 游戏 下 的 性能 影响 和 速度 需求 ， 使用 的 模型 仅 提供 人物 识别 的 矩形 矩形框   解决 ：   自行 设计 自行设计 了 通过 矩形 矩形框 计算 人物 头部 位置 的 函数   ， 确定 头部 大致 位置 并 瞄准 。 根据 游戏 运行 时 实际 情况 调整 ， 最终 射击 精确 精确度 十分 可观","text_tokens":["位置","游戏","自行设计","根据","模型"," ","情况","，","矩形","确定","提供","识别","速度","计算","需求","瞄准","运行","性能","设计","十分","矩形框","考虑","了","和","仅","解决","实时","射击","头部","通过","并","函数","实际","精确","使用","影响","可观","精确度","自行","大致","到","。","人物","最终","：","调整","的","时","下"],"title":"4 . 预 训练 模型 仅 提供 人物 矩形框","title_tokens":["预","模型"," ","训练","4","人物","矩形框","矩形","仅","提供","."]},{"location":"get_start/AI001/#5csgo","text":"CS : GO 接受 鼠标 原始 输入 后 进行 了 变换 ， 导致 鼠标 移动 过大时 出现 偏移 。   解决 ： 在 反复 测试 中 我们 确定 其 与 鼠标 加速 、 鼠标 灵敏 敏度 灵敏度 有关 。 我们 记录 了 约 20 组 参数 ，   自行 搭建 了 单层 pytorch 全 连接 模型   ， 最终 回归 得到 了 鼠标 移动 倍率 基本 与 鼠标 灵敏 敏度 灵敏度 和 鼠标 加速 有关 ， 并 得到 定性 关系 。 同时 在 游戏 内 关闭 “ 原始 输入 ” 选项 。","text_tokens":["关闭","中","加速","与","游戏","模型"," ","出现","在","，","、","pytorch","确定","记录","我们","约","倍率","其","连接","测试","敏度","了","go","偏移","选项","和","过大时","输入","关系","解决","灵敏","灵敏度","搭建","得到","“","并","参数",":","同时","”","组","反复","自行","回归","导致","基本","定性","变换","移动","鼠标","接受","原始","20","。","cs","进行","：","有关","全","最终","后","单层","内"],"title":"5 . CS : GO 鼠标 偏移 问题","title_tokens":["鼠标","问题"," ","cs","go",":","偏移",".","5"]},{"location":"get_start/AI001/#_12","text":"","text_tokens":[],"title":"开发 日志","title_tokens":["日志","开发"," "]},{"location":"get_start/AI001/#_13","text":"","text_tokens":[],"title":"前端 启动器","title_tokens":["启动","前端","启动器"," "]},{"location":"get_start/AI001/#036-7-16-1008","text":"修复 了 2 个 bug   优化 使用 体验 ， 在 运行 时 改变 参数 ， 将 提示 用户 改动 下次 生效 ， 若 在 启动 启动器 内 使用 快捷 快捷键 启动 / 关闭 后端 将 不 显示 弹窗   在 游戏 内 可以 通过 语音 关闭 后 端 ， 无需 切换 启动 启动器 关闭 （ 待 一步 进一步 测试 ）","text_tokens":["关闭","个","（","游戏","可以","将","显示","一步"," ","在","，","启动","不","运行","体验","/","无需","测试","了","用户","语音","启动器","待","修复","优化","改变","参数","提示","端","快捷键","通过","生效","使用","切换","）","快捷","弹窗","2","改动","内","进一步","下次","后","时","bug","若"],"title":"0.3 . 6   -   7 - 16 - 10 : 08","title_tokens":["0.3","7","-","6","16"," ","08",":","10","."]},{"location":"get_start/AI001/#035-7-14-1954","text":"在 用户 选择 CS : GO 时 显示 鼠标 灵敏 敏度 灵敏度 的 调节 调节器 ， 与 游戏 内 保持 一致 保持一致 ， 提高 精准 准度 精准度","text_tokens":["调节器","与","游戏","精准度","显示"," ","在","，","准度","提高","保持一致","敏度","保持","go","用户","灵敏","灵敏度","一致",":","调节","精准","鼠标","选择","cs","内","的","时"],"title":"0.3 . 5   -   7 - 14 - 19 : 54","title_tokens":["0.3","7","-","19"," ","14",":",".","5","54"]},{"location":"get_start/AI001/#033-7-14-1537","text":"优化 使用 体验 ， 设置 弹窗 提示 ， 指引 用户 使用 方式","text_tokens":["体验","优化","提示","方式"," ","设置","，","用户","使用","指引","弹窗"],"title":"0.3 . 3   -   7 - 14 - 15 : 37","title_tokens":["37","0.3","7","-"," ","14",":","3",".","15"]},{"location":"get_start/AI001/#031-7-14-1430","text":"完成 与 后 端的 json 参数 数传 传递 参数传递   后 端 脚本 改为 新 线程 隐藏 藏式 隐藏式 启动 （   python   - >   start   pythonw   ） ， 避免 运行 后 端 之后 前端 程序 阻塞   增加 动态 模式 启动 （ Beta ） 选项   启动 启动器 运行 后 端 之后 不再 关闭 ， 运行 按钮 变为 结束 后 端 。 同时 ， 关闭 启动 启动器 窗口 也 会 结束 后 端 （ 类似 腾讯 会议 设计 ）","text_tokens":["关闭","pythonw","窗口","（","与","不再"," ",">","隐藏","也","start","，","避免","藏式","前端","beta","启动","之后","运行","传递","腾讯","阻塞","参数传递","完成","会议","设计","数传","选项","启动器","线程","动态","参数","端","会","同时","）","模式","新","json","-","按钮","结束","隐藏式","。","增加","改为","后","脚本","变为","端的","类似","python","程序"],"title":"0.3 . 1   -   7 - 14 - 14 : 30","title_tokens":["30","0.3","7","-"," ","14",":","1","."]},{"location":"get_start/AI001/#030-7-13-2251","text":"使用   ttkbootstrap   重构 界面 ， 现代 现代化 、 扁平 平化 扁平化 。   增加 模型 选择 及 提示 、 游戏 选择 、 启动 方式 选择 （ Demo 或 Normal ）","text_tokens":["（","游戏","模型"," ","平化","，","、","现代","重构","启动","界面","扁平","提示","normal","使用","现代化","）","扁平化","方式","。","选择","及","增加","或","demo","ttkbootstrap"],"title":"0.3 . 0   -   7 - 13 - 22 : 51","title_tokens":["0.3","7","-"," ","51",":","0","13",".","22"]},{"location":"get_start/AI001/#020-7-13-1123","text":"使用   tkinter   完成 前端 启动 启动器 开发","text_tokens":["启动","tkinter","完成"," ","开发","使用","启动器","前端"],"title":"0.2 . 0   -   7 - 13 - 11 : 23","title_tokens":["11","7","23","0.2","-"," ",":","0","13","."]},{"location":"get_start/AI001/#_14","text":"","text_tokens":[],"title":"后 端 脚本","title_tokens":["脚本","端"," ","后"]},{"location":"get_start/AI001/#033-715-1932","text":"修复 了 演示 模式 的 1 个 bug ， 优化 动态 补偿 算法 的 流程 ， 减少 时延","text_tokens":["补偿","个","演示","动态","修复","优化","时延","流程"," ","了","算法","，","1","的","减少","bug","模式"],"title":"0.3 . 3   -   7.15 - 19 : 32","title_tokens":["0.3","-","7.15","19"," ",":","32","3","."]},{"location":"get_start/AI001/#032-714-2311","text":"适配 CS : GO ， 根据 用户 输入 的 鼠标 灵敏 敏度 灵敏度 调整 鼠标 移动 算法 ， 提高 精准 准度 精准度","text_tokens":["精准度","根据"," ","，","适配","准度","提高","敏度","go","用户","输入","灵敏","灵敏度","算法",":","精准","移动","鼠标","cs","调整","的"],"title":"0.3 . 2   -   7.14 - 23 : 11","title_tokens":["2","11","0.3","23","-"," ","7.14",":","."]},{"location":"get_start/AI001/#031-714-1800","text":"新 的 演示 模式 ， 实时 标框 并 展示 ， 截图 识别 范围 改 回 全屏 识别 。   完成 与 前端 的 json 参数 数传 传递 参数传递","text_tokens":["与"," ","，","标框","前端","识别","全屏","传递","参数传递","完成","数传","展示","实时","演示","并","参数","回","新","json","截图","范围","。","改","的","模式"],"title":"0.3 . 1   -   7.14 - 18 : 00","title_tokens":["0.3","-"," ","7.14",":","1","00",".","18"]},{"location":"get_start/AI001/#030-714-0056","text":"修复 识别 非 真实 屏幕 分辨 辨率 分辨率 的 问题   初步 实现 了 动态 补偿 算法 ， 对近 匀速 运动 匀速运动 的 敌人 有效","text_tokens":["补偿","问题"," ","，","识别","实现","初步","匀速","真实","分辨率","敌人","有效","了","非","辨率","动态","修复","分辨","匀速运动","对近","算法","屏幕","运动","的"],"title":"0.3 . 0   -   7.14 - 00 : 56","title_tokens":["0.3","-","56"," ","7.14",":","00","0","."]},{"location":"get_start/AI001/#020-713-1232","text":"将 模型 迁移 至 cuda ， 一步 进一步 降低 时延   优化 了 选择 最佳 目标 的 方式 ， 由 选择 最大 目标 改为 选择 离 准星 最近 目标","text_tokens":["最佳","将","一步","模型"," ","，","由","了","至","准星","迁移","最近","时延","优化","目标","最大","降低","方式","选择","进一步","离","的","改为","cuda"],"title":"0.2 . 0   -   7.13 - 12 : 32","title_tokens":["0.2","-"," ","12",":","32","0",".","7.13"]},{"location":"get_start/AI001/#015-712-2148","text":"改进 截图 、 鼠标 移动 的 API ， 修改 使用 模型 ， 简洁 流程 函数 。 降低 单次 瞄准 延迟 为 0.2 左右 秒左右 ， 与 高手 反应 速度 反应速度 持平   修改 截图 的 识别 位置 为 屏幕 中心   使用 opencv 置顶 小窗 展示 识别 过程","text_tokens":["与","模型"," ","高手","，","、","识别","速度","瞄准","左右","修改","简洁","过程","为","反应","秒左右","展示","反应速度","置顶","流程","函数","单次","屏幕","使用","延迟","降低","api","小窗","移动","鼠标","0.2","中心","截图","。","改进","opencv","的","持平","位置"],"title":"0.1 . 5   -   7.12 - 21 : 48","title_tokens":["0.1","-"," ",":","48",".","21","5","7.12"]},{"location":"get_start/AI001/#010-712-1114","text":"初代 版本 ， 单次 瞄准 延迟 近 0.4 - 0.5 秒","text_tokens":["瞄准","秒","-","近","版本"," ","单次","0.5","，","初代","0.4","延迟"],"title":"0.1 . 0   -   7.12 - 11 : 14","title_tokens":["11","0.1","-"," ","14",":","0",".","7.12"]},{"location":"get_start/AI001/#_15","text":"","text_tokens":[],"title":"附录","title_tokens":["附录"]},{"location":"get_start/AI001/#_16","text":"os   sys   time   tkinter   ttkbootstrap   json   pickle   PyQt5 . QtWidgets   PyQt5 . QtGui   win32gui   pytest   pytorch ( torch )   keyboard   pydirectinput   opencv - python ( cv2 )   numpy","text_tokens":[" ","pytorch","os","pyqt5","tkinter","cv2",")","sys","win32gui","pytest","qtwidgets","time","torch",".","pydirectinput","json","keyboard","-","(","numpy","opencv","ttkbootstrap","qtgui","python","pickle"],"title":"第三方 依赖 库","title_tokens":["三方","依赖","第三"," ","库","第三方"]},{"location":"get_start/test/","text":"test","text_tokens":["test"],"title":"test","title_tokens":["test"]},{"location":"get_start/test/#test","text":"","text_tokens":[],"title":"test","title_tokens":["test"]}]}